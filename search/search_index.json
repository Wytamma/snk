{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snk","text":"<p>Documentation: https://snk.wytamma.com</p> <p>Source Code: https://github.com/Wytamma/snk</p> <p>Paper: https://joss.theoj.org/papers/10.21105/joss.07410</p> <p>Snk (pronounced snek) is a Snakemake workflow management system. Snk allows you to install Snakemake workflows as dynamically generated Command Line Interfaces (via snk-cli). Using a workflow as a CLI increases its interoperability and allows complex workflows to be used as modular components in a larger system.</p>"},{"location":"#installation","title":"Installation","text":"<p>From bioconda:</p> <pre><code>conda create -n snk bioconda::snk\n</code></pre> <p>From PyPI:</p> <pre><code>pip install snk\n</code></pre>"},{"location":"#basic-use","title":"Basic Use","text":""},{"location":"#install-a-workflow-as-a-cli","title":"Install a workflow as a CLI","text":"<p>The snk install command can be use to install Snakemake workflows as CLIs. Snk can install Snakemake workflows from GitHub repos or local paths.</p> <pre><code>snk install wytamma/snk-basic-pipeline\n</code></pre> <p>Successfully installed snk-basic-pipeline (ff034f1b)!</p> <p>The snk install command is flexible and can be used to install diverse workflows. For example, the dna-seq-gatk-variant-calling workflow (v2.1.1) as <code>variant-calling</code> with Snakemake v8.10.8 and Pandas and NumPy dependency. An index of publicly available Snakemake workflows can be found on the snakemake workflow catalog.</p> <pre><code>snk install \\\n  snakemake-workflows/dna-seq-gatk-variant-calling \\\n  --name variant-calling \\\n  --snakemake 8.10.8 \\\n  -d pandas==1.5.3 \\\n  -d numpy==1.26.4 \\\n  -t v2.1.1\n</code></pre> <p>Successfully installed variant-calling (v2.1.1)!</p>"},{"location":"#manage-installed-workflows","title":"Manage Installed Workflows","text":"<p>You can list installed workflows with <code>snk list</code> and uninstall them with <code>snk uninstall</code>.</p> <pre><code>snk list\n</code></pre> Workflow Version snk-basic-pipeline ff034f1b variant-calling v2.1.1 <pre><code>snk uninstall snk-basic-pipeline\n</code></pre> <p>Successfully uninstalled snk-basic-pipeline!</p>"},{"location":"#inspect-the-cli","title":"Inspect the CLI","text":"<p>Snk will automatically create a fully featured CLI for the Snakemake workflow using snk-cli. </p> <p>Note</p> <p>For more details on the CLI created by <code>snk</code> read the snk-cli docs</p> <pre><code>variant-calling --help\n</code></pre> <p></p>"},{"location":"#view-run-options","title":"View run options","text":"<p>Workflow configuration options are automatically generated from the snakemake config file.</p> <pre><code>variant-calling run --help\n</code></pre> <p></p>"},{"location":"#create-a-dag","title":"Create a DAG","text":"<p>Here we use the <code>.test</code> resources included in the workflow to create the DAG (requires <code>graphviz</code>).</p> <pre><code>variant-calling run -r .test/config -r .test/data --dag dag.pdf\n</code></pre> <p></p>"},{"location":"#configure","title":"Configure","text":"<p>Snk will dynamically generate config options for the CLI. For example if the config.yaml file has the option <code>samples: config/samples.tsv</code> you can set this option with the <code>--samples</code> flag.</p> <pre><code>variant-calling run --samples new.tsv\n</code></pre> <p>You can also configure the workflow using a config file. </p> <pre><code>variant-calling config --pretty # print the config \nvariant-calling config &gt; config.yml # save the config \nvariant-calling run --config config.yml # run with config \n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Read the documentation for more information.</p>"},{"location":"#license","title":"License","text":"<p><code>snk</code> is distributed under the terms of the MIT license.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use <code>snk</code> in an academic setting then please cite the following article:</p> <ul> <li>Wirth, Wytamma, Simon Mutch, and Robert Turnbull. \u201cSnk: A Snakemake CLI and Workflow Management System.\u201d Journal of Open Source Software 9, no. 103 (2024): 7410. DOI: 10.21105/joss.07410.</li> </ul> <p>In BibTeX format:</p> <pre><code>@article{Wirth2024, \n    doi = {10.21105/joss.07410}, \n    year = {2024}, \n    publisher = {The Open Journal}, \n    volume = {9}, \n    number = {103}, \n    pages = {7410}, \n    author = {Wytamma Wirth and Simon Mutch and Robert Turnbull}, \n    title = {Snk: A Snakemake CLI and Workflow Management System}, \n    journal = {Journal of Open Source Software}\n}\n</code></pre>"},{"location":"managing_workflows/","title":"Using Snk to manage workflows","text":"<p>The snk command line interface (CLI) provides several options and commands to manage Snakemake workflows. Here's a detailed breakdown of the usage.</p>"},{"location":"managing_workflows/#installing-workflows","title":"Installing workflows","text":"<p>The <code>snk install</code> command is used to install a workflow. You can specify the path, URL, or GitHub name (user/repo) of the workflow to install. The simplest way to install a workflow is from Github. The Snakemake workflow catalog has an index of Snakemake workflows.</p> <p>For example we can install snk-basic-pipeline (an example workflow from the Snakemake tutorial) with the following command:</p> <pre><code>snk install Wytamma/snk-basic-pipeline\n</code></pre> <p>By default Snk workflows will be installed (cloned) into a <code>snk</code> folder in the parent directory of the python <code>bin</code> directory (configurable with <code>$SNK_HOME</code> or <code>--home</code>). Snk will then create a executable for the workflow at <code>$SNK_HOME/bin</code> and symlink the executable to python <code>bin</code> directory (configurable with <code>$SNK_BIN</code> or <code>--bin</code>). </p> <pre><code>/home/wwirth/.conda/envs/snk/\n\u251c\u2500\u2500 bin ($SNK_BIN)\n\u2502   \u251c\u2500\u2500 python\n\u2502   \u251c\u2500\u2500 snk-basic-pipeline -&gt; .../snk/bin/snk-basic-pipeline\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 snk ($SNK_HOME)\n    \u251c\u2500\u2500 bin\n    \u2502   \u2514\u2500\u2500 snk-basic-pipeline (symlinked to $SNK_BIN)\n    \u2514\u2500\u2500 workflows\n        \u2514\u2500\u2500 snk-basic-pipeline\n            \u251c\u2500\u2500 config\n            \u2514\u2500\u2500 workflow\n                \u251c\u2500\u2500 Snakefile\n                \u251c\u2500\u2500 envs\n                \u2514\u2500\u2500 ...\n</code></pre> <p>Note</p> <p>To globally install a workflow you could run <code>SNK_BIN=~/.local/bin snk install Wytamma/snk-basic-pipeline</code> assuming <code>~/.local/bin</code> is in you <code>$PATH</code> (e.g. <code>export PATH=$PATH:~/.local/bin</code> in .bashrc) </p>"},{"location":"managing_workflows/#local-install","title":"Local install","text":"<p>To install a local workflow simply pass the path to <code>snk install</code>. </p> <pre><code>snk install path/to/snakemake/workflow\n</code></pre> <p>Use the <code>--editable</code> flag to install local workflows in editable mode (useful for development). This will symlink the path to the <code>SNK_HOME</code> directory so all changes will be reflected in the CLI.</p> <pre><code>snk install -e path/to/snakemake/workflow\n</code></pre>"},{"location":"managing_workflows/#isolated-workflow-environments","title":"Isolated workflow environments","text":"<p>By default snk will use the snakemake and <code>snk-cli</code> version installed in the current environment. </p> <p>Use the <code>--isolate</code> flag to create a new python virtual environment for the workflow. This will install a standalone version of snakemake and <code>snk-cli</code> in the environment. By isolating workflows you can use workflows that depend on different versions of snakemake at the same time.</p> <pre><code>snk install --isolate Wytamma/snk-basic-pipeline\n</code></pre> <p>To install a specific version of snakemake in the isolated environment, use the <code>--snakemake</code> flag. This will create a python virtual environment with the specified version of snakemake. </p> <pre><code>snk install --snakemake 7.32.4 Wytamma/snk-basic-pipeline\n</code></pre> <p>You can add dependencies to the environment with the <code>--dependency</code> flag. This will install the specified python package in the environment. Useful for v8 workflows that use Snakemake plugins.</p> <pre><code>snk install --snakemake \"&gt;8.0\" --dependency snakemake-executor-plugin-slurm Wytamma/snk-basic-pipeline\n</code></pre>"},{"location":"managing_workflows/#other-install-options","title":"Other install options","text":"<p>Several options exist to modify the install process. </p> <p>Use <code>--name</code> to rename the workflow. The new name will be used to call the CLI.</p> <pre><code>snk install --name my-workflow Wytamma/snk-basic-pipeline &amp;&amp; my-workflow -h\n</code></pre> <p>Use <code>--tag</code> to specify the tag (version) of the workflow to install. You can specify a branch name, or tag. If not specified, the latest commit will be installed.</p> <pre><code>snk install --tag v1.0 Wytamma/snk-basic-pipeline &amp;&amp; my-workflow -v\n</code></pre> <p>Use <code>--commit</code> to specify the commit (SHA) of the workflow to install. If not specified, the latest commit will be installed.</p> <pre><code>snk install --commit a725d3a4 Wytamma/snk-basic-pipeline &amp;&amp; snk-basic-pipeline -v\n</code></pre> <p>Use <code>--config</code> to install a workflow with a non-standard config location. This is useful for installing a workflow that does not follow Snakemake best practices. The path should be relative to the workflow directory.</p> <pre><code>snk install --config path/to/config Wytamma/snk-basic-pipeline\n</code></pre> <p>Use <code>--snakefile</code> to install a workflow with a non-standard Snakefile name. Will rename the given file to <code>Snakefile</code>. This is useful for installing a workflow that does not follow Snakemake best practices. The path should be relative to the workflow directory.</p> <pre><code>snk install --snakefile path/to/Snakefile Wytamma/snk-basic-pipeline\n</code></pre> <p>Use <code>--resource</code> specify a resource that is required at run time. Resources will be copied to the run directory at runtime. The path should be relative to the workflow directory. </p> <pre><code>snk install --resource path/to/resource Wytamma/snk-basic-pipeline\n</code></pre> <p>If the the workflow should not use conda environments, use <code>--no-conda</code>. This will prevent the workflow from creating a conda environment and will not use the <code>--use-conda</code> flag when running the workflow. </p> <pre><code>snk install --no-conda Wytamma/snk-basic-pipeline\n</code></pre> <p>Installation can be forced with the <code>--force</code> flag. This can be used to overwrite existing workflows.</p> <pre><code>snk install --force Wytamma/snk-basic-pipeline\n</code></pre>"},{"location":"managing_workflows/#listing-workflows","title":"Listing workflows","text":"<p>The <code>snk list</code> command is used to view the installed workflows. </p> <pre><code>snk list\n</code></pre> <pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Workflow              \u2503 Version  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 snk-basic-pipeline    \u2502 3445c7cd \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 variant-calling       \u2502 v2.1.1   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 workflow              \u2502 editable \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note</p> <p>Use <code>--verbose</code> (<code>-v</code>) to show workflow installation paths.</p>"},{"location":"managing_workflows/#uninstall-workflows","title":"Uninstall workflows","text":"<p>The <code>snk uninstall</code> command is used to uninstall workflows. You must pass uninstall the <code>name</code> of the workflow (e.g. only the <code>repo</code> part of <code>user</code>/<code>repo</code> if installed from Github). </p> <pre><code>snk uninstall workflow\n</code></pre> <pre><code>Uninstalling workflow\n  Would remove:\n    &lt;SNK_HOME&gt;/workflows/workflow/*\n    &lt;SNK_BIN&gt;/workflow\nProceed (Y/n)? y\n</code></pre> <p>Note</p> <p>Use <code>--force</code> to force uninstall without asking.</p>"},{"location":"managing_workflows/#editing-workflow-cli-configuration","title":"Editing workflow CLI configuration","text":"<p>The <code>snk edit</code> command is used to edit the CLI configuration of a installed workflow. This will open the configuration file in the default text editor. </p> <pre><code>snk edit workflow\n</code></pre> <p>Use the <code>--path</code> flag to print the path to the configuration file instead of opening it.</p> <pre><code>snk edit --path workflow\n</code></pre> <p>Note</p> <p>The configuration file is a YAML file that contains the CLI configuration for the workflow. For more details on the CLI configuration file read the snk config file docs.</p>"},{"location":"managing_workflows/#ejecting-workflows","title":"Ejecting workflows","text":"<p>The <code>cp -r $(workflow-name -p) workflow-name</code> command is used to eject the workflow from the package. This will copy the workflow files to the current working directory. This will allow you to modify the workflow and run it with the standard <code>snakemake</code> command.</p> <p>Following modification of the workflow you can run <code>snk install ./workflow-name --force</code> to install the updated workflow.</p>"},{"location":"snk_config_file/","title":"Snk Configuration File","text":"<p>The <code>snk.yaml</code> file serves as the main interface for configuring the Snk workflow CLI. Users can tailor the workflow's settings, specify required resources, and control the appearance of the command line interface by setting various options in the <code>snk.yaml</code> file.</p>"},{"location":"snk_config_file/#modifying-the-snkyaml-file","title":"Modifying the <code>snk.yaml</code> File","text":"<p>The <code>snk.yaml</code> file should be located in the root directory of the Snakemake workflow. It is used to configure the Snk CLI and provide additional information about the workflow. The <code>snk.yaml</code> file is written in YAML format and can be edited with any text editor.</p> <p>For convenience, you can use the <code>snk edit [WORKFLOW_NAME]</code> command to open the <code>snk.yaml</code> file in your default text editor. This command will create a new <code>snk.yaml</code> file if one does not already exist.</p> <pre><code>snk edit workflow\n</code></pre>"},{"location":"snk_config_file/#available-configuration-options","title":"Available Configuration Options","text":"<p>The following options are available for configuration in <code>snk.yaml</code>:</p> Name Description Type Default <code>logo</code> The text used to dynamically generate the ASCII art displayed in the CLI. String <code>&lt;name-of-workflow&gt;</code> <code>art</code> A string representing ASCII art to display in the CLI (overwrites <code>logo</code>). String or <code>null</code> <code>null</code> <code>tagline</code> A string representing the tagline displayed in the CLI. String <code>\"A Snakemake workflow CLI generated with Snk\"</code> <code>font</code> A string representing the font used in the CLI (see FontList). String <code>\"small\"</code> <code>resources</code> A list of resource files required for the workflow. List <code>[]</code> <code>symlink_resources</code> A boolean that controls whether symbolic links are created for resources (avoid using this unless you know). Boolean <code>False</code> <code>conda</code> A boolean that controls whether the workflow should use conda. The <code>--use-conda</code> flag will only be passed to snakemake if True. Boolean <code>True</code> <code>additional_snakemake_args</code> A list of additional arguments to pass to snakemake. List <code>[]</code> <code>skip_missing</code> Skip any missing CLI options (i.e. those in config but not in the snk file). Boolean <code>False</code> <code>commands</code> A list of subcommands to include in the CLI. List <code>[\"run\", \"script\", \"env\", \"profile\", \"info\", \"config\"]</code> <code>min_snk_cli_version</code> The minimum version of the Snk CLI required to run the workflow. String or <code>null</code> <code>null</code> <code>cli</code> Annotations for the workflow CLI parameters (see CLI section below). Object None"},{"location":"snk_config_file/#example-snkyaml-file","title":"Example <code>snk.yaml</code> File","text":"<p>Below is an example of a <code>snk.yaml</code> file illustrating all available options:</p> <pre><code>logo: \"MyWorkflow\"\nfont: \"small\"\nart: |\n  _______  _______  _______  _______ \n (  ____ \\(  ___  )(       )(  ____ \\\n | (    \\/| (   ) || () () || (    \\/\n | (__    | (___) || || || || (_____ \n |  __)   |  ___  || |(_)| |(_____  )\n | (      | (   ) || |   | |      ) |\n | (____/\\| )   ( || )   ( |/\\____) |\n (_______/|/     \\||/     \\|\\_______)\ntagline: \"A comprehensive Snakemake workflow configured with snk.yaml\"\nresources:\n  - \"data/input1.txt\"\n  - \"data/input2.txt\"\nsymlink_resources: False\nconda: True\nadditional_snakemake_args:\n  - \"--reason\"\nskip_missing: True\nmin_snk_cli_version: \"0.6.1\"\ncli:\n  input:\n    type: Path\n    help: \"Path to the input file\"\n    required: True\n  output:\n    type: Path\n    help: \"Path to the output directory\"\n    required: True\n</code></pre> <p>In this example:</p> <ul> <li>The workflow dynamically generated <code>logo</code> is set to \"MyWorkflow\".</li> <li>The <code>font</code> used for the logo is \"small\".</li> <li>ASCII art is specified directly in the <code>art</code> configuration, taking precedence over the logo if both are provided.</li> <li>The <code>tagline</code> is \"A workflow to illustrate the use of snk.yaml\". This will be printed in the CLI help under the logo.</li> <li>Two resource files, <code>data/input1.txt</code> and <code>data/input2.txt</code>, are required for the workflow. They will be copied to the working directory at runtime.</li> <li>The <code>conda</code> flag is enabled (True), indicating that the workflow should utilise Conda environments for executing tasks, provided the conda command is accessible in the system environment.</li> <li>Additional Snakemake arguments are specified under <code>additional_snakemake_args</code>, including --reason which will display the reasons for rule execution.</li> <li>The <code>skip_missing</code> option is enabled (True), which means that only config defined in the <code>snk.yaml</code> file, will be included in the dynamically generate CLI.</li> <li>The <code>min_snk_cli_version</code> is set to \"0.6.1\", indicating that the workflow requires at least version 0.6.1 of the Snk CLI to run.</li> <li>An annotation is provided for the <code>input</code> parameter, which is of type <code>str</code> and comes with a help message \"Path to the input file\".</li> </ul>"},{"location":"snk_config_file/#cli","title":"CLI","text":"<p>Annotations play a crucial role in configuring the dynamic Snk CLI. They provide metadata about the configuration parameters used in your Snakemake workflow and can dictate how the CLI will prompt users for these parameters. The <code>snk.yaml</code> file supports the following fields under the <code>cli</code> option:</p> <ul> <li><code>type</code>: Determines the datatype of the configuration parameter. It can be one of the following: <code>int</code>, <code>str</code>, <code>path</code>, <code>bool</code>, <code>list</code>, <code>list[str]</code>, <code>list[path]</code>, <code>list[int]</code>, <code>list[float]</code>, <code>pair</code>, or <code>dict</code>.</li> <li><code>help</code>: This is a descriptive text that provides users with information or guidance on what the parameter is used for.</li> <li><code>required</code>: A boolean value (either <code>True</code> or <code>False</code>) that indicates whether the parameter is mandatory. If a parameter is marked as <code>required: True</code>, the Snk CLI will insist that a user provides a value for it.</li> <li><code>default</code>: A default value for the parameter. If a user does not provide a value for the parameter, the Snk CLI will use this default value instead.</li> <li><code>short</code>: A short (-) flag to use with the option.</li> <li><code>choices</code>: A list of possible values that the parameter can take. If a user provides a value that is not in this list, the Snk CLI will raise an error.</li> </ul>"},{"location":"snk_config_file/#example-snkyaml-file-with-cli-annotations","title":"Example <code>snk.yaml</code> File with CLI Annotations","text":"<p>Here's an example of a <code>snk.yaml</code> file that includes annotations for several configuration parameters:</p> <pre><code>cli:\n  input:\n    type: path\n    help: \"Path to the input file\"\n    required: True\n    short: i\n  text:\n    default: \"Hello, world!\"\n    type: str\n    help: \"A string to save to a file\"\n    required: False\n  count:\n    type: int\n    help: \"Number of times to perform the operation\"\n    required: True\n  flag:\n    type: bool\n    help: \"A boolean flag to enable or disable a feature\"\n    required: False\n  value_pair:\n    type: pair[str, int]\n    default: [\"key\", 1]\n    help: \"A key-value pair\"\n    required: False\n  dict:\n    type: dict[str, str]\n    default: [[\"key1\", \"value1\"], [\"key2\", value2\"]]\n    help: \"A dictionary\"\n    required: False\n  choice:\n    help: \"A choice to select\"\n    choices:\n      - \"option1\"\n      - \"option2\"\n    required: False\n</code></pre> <p>In this example, the <code>input</code> and <code>count</code> parameters are required, while the <code>text</code>, <code>flag</code> and <code>choice</code> parameters are optional. the flag <code>-i</code> can be used as shorthand for <code>--input</code>. The <code>text</code> parameter has a default value of \"Hello, world!\" that will be used if the user does not provide a value. </p> <p>The parameter <code>value_pair</code> is a pair of a string and an integer, with a default value of <code>[\"key\", 1]</code>. The <code>dict</code> parameter is a dictionary of strings, with a default value of <code>[[\"key1\", \"value1\"], [\"key2\", value2\"]]</code> that will be convert to a dictionary when passed to snakemake. The <code>choice</code> parameter can only take one of the values specified in the <code>choices</code> list. </p> <p>The <code>type</code> and <code>help</code> attributes provide additional information about each parameter, informing the user of the expected datatype and what the parameter is used for, respectively.</p>"},{"location":"snk_config_file/#nested-annotations-in-the-snkyaml-file","title":"Nested Annotations in the <code>snk.yaml</code> File","text":"<p>Your <code>snk.yaml</code> annotations must match the structure of your <code>config.yaml</code> file. If you have nested options in your <code>config.yaml</code> file, you must specify these in the <code>snk.yaml</code> file as well. Here's an example of how you might specify nested options in a <code>snk.yaml</code> file:</p> <pre><code>cli:\n  nested:\n    input:\n      type: path\n      help: \"Path to the input file\"\n  option:\n    type: str\n    default: \"Hello, world!\"\n</code></pre> <p>This will produce the following CLI:</p> <pre><code>workflow run --nested-input &lt;input&gt; --option &lt;other_option&gt;\n</code></pre> <p>The matching <code>config.yaml</code> would look like this:</p> <pre><code>nested:\n  input: \"path/to/input\"\noption: \"Hello, world!\"\n</code></pre>"},{"location":"snk_config_file/#using-snkyaml-without-a-configyaml-file","title":"Using snk.yaml without a config.yaml file","text":"<p>If you don't have a <code>config.yaml</code> file, you can still use the <code>snk.yaml</code> file to specify the parameters and defaults for your workflow. The <code>snk.yaml</code> file will be used to generate the CLI, and the parameters will be available in the <code>config</code> dictionary in your <code>Snakefile</code>. However, you should probably still have a <code>config.yaml</code> file to store your config, as this is the standard way to manage configuration in Snakemake workflows (unless you're creating a workflow package).</p>"},{"location":"snk_config_file/#validating-config-with-the-snkyaml-file","title":"Validating Config with the <code>snk.yaml</code> File","text":"<p>Snk provides a function that can be use to validate snakemake config using the <code>snk.yaml</code> cli annotations. The <code>validate_config</code> function will convert values to the correct type if possible. If the value cannot be converted to the correct type, an error will be raised. This can be added to the start of your <code>Snakefile</code> to ensure that the config is valid before running the workflow.</p> <pre><code>try:\n  from snk_cli import validate_config\n  validate_config(config, snk_yaml)\nexcept ImportError:\n  pass\n</code></pre> <p>To ensure that the workflow will still run in the absence of the <code>snk</code> package, you can wrap the import statement in a try/except block.</p>"},{"location":"snk_config_file/#resources","title":"Resources","text":"<p>Resources represent files or folders that are essential for the execution of the workflow. They must be present in the workflow's working directory at runtime. The <code>snk.yaml</code> configuration file allows you to specify these resources.</p> <p>When the workflow is invoked with the <code>run</code> command, the Snk CLI will ensure that the specified resources are available in the working directory. It accomplishes this by either copying the resource files or creating symbolic links (symlinks) to them. The method used depends on the value of the <code>symlink_resources</code> option in the <code>snk.yaml</code> file. If <code>symlink_resources</code> is set to <code>true</code>, symlinks will be used. Otherwise, the files will be copied.</p> <p>Warning</p> <p>You should only set <code>symlink_resources</code> to <code>true</code> if the workflow won't modify these resources. Any modifications to symlinked resources will be system-wide!</p> <p>Once the workflow has successfully completed, the Snk CLI will clean up the working directory by deleting the copied resources or unlinking the symlinks.</p>"},{"location":"snk_config_file/#example-snkyaml-file-with-resources","title":"Example <code>snk.yaml</code> File with Resources","text":"<p>Here's an example of how you might specify resources in a <code>snk.yaml</code> file:</p> <pre><code>resources:\n  - \"data/input1.txt\"\n  - \"data/input2.txt\"\nsymlink_resources: true\n</code></pre> <p>In this example, <code>data/input1.txt</code> and <code>data/input2.txt</code> are listed as required resources for the workflow. The <code>symlink_resources</code> option is set to <code>true</code>, meaning that symlinks to these files will be created in the working directory when the workflow is run. The symlinks will be removed once the workflow execution has successfully completed.</p>"},{"location":"workflow_packages/","title":"Using Snk-CLI to build self contained tools","text":"<p>While <code>snk</code> is useful for managing workflows, using snk does add an extra step to typical install processes. Users must first install snk before they can <code>snk install</code> your workflow. However, it is possible to build a workflow as a standalone package (relying on <code>pip</code> or <code>conda</code> to do the installation) and only using <code>snk-cli</code> to dynamically generate the CLI. </p> <p>Internally <code>snk</code> uses the <code>snk-cli</code> package to generate CLIs. By using the <code>CLI</code> class from the <code>snk-cli</code> package you can build a fully featured workflow package without having to write a Snakemake wrapper or use <code>snk</code> to install it.</p> <p>Turning a workflow into a package means that you are committing to a different style of project. A good example of this style is pangolin, a tool for assigning SARS-CoV-2 genome sequences to global lineages. Pangolin has a CLI that wraps serval Snakemake rules. From the user perspective they <code>conda install pangolin</code> and then use the CLI <code>pangolin &lt;query&gt;</code> to run the tool. Pangolin abstracts away the execution of the Snakemake workflow.  </p> <p>Info</p> <p>All the code from this guide can be found in the repo snk-workflow-package-example</p>"},{"location":"workflow_packages/#project-structure","title":"Project structure","text":"<p>To start you should structure your workflow as a Python package. When building packages it's useful to use a project manager like hatch or poetry. </p> <p>Using hatch we can run <code>hatch new \"Workflow Name\" --cli</code> to scaffold a project. This would create the following structure in your current working directory:</p> <pre><code>workflow-name\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 workflow_name\n\u2502       \u251c\u2500\u2500 cli\n\u2502       \u2502   \u2514\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __about__.py\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 __main__.py\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 pyproject.toml\n</code></pre>"},{"location":"workflow_packages/#configuration","title":"Configuration","text":"<p>The <code>pyproject.toml</code> file is used to configure the project metadata, dependencies, environments, etc. (see https://hatch.pypa.io/latest/config/metadata/ for details). Replace the default dependency of <code>click</code> with <code>snk-cli</code> e.g.</p> <pre><code>dependencies = [\n  \"snk-cli\",\n]\n</code></pre> <p>Warning</p> <p>To prevent unexpected changes to your CLI you should propbably pin <code>snk-cli</code> to the latest version and update the dependency incrementally when a new version becomes avaible</p> <p>The <code>[project.scripts]</code> section in the <code>pyproject.toml</code> file is used to define the entry point for our tool (the CLI). </p> <pre><code>[project.scripts]\nworkflow-name = \"workflow_name.cli:workflow_name\"\n</code></pre> <p>Modify the the default hatch CLI to the dynamic CLI generated with snk by replacing the contents of <code>src/workflow_name/cli/__init__.py</code> with the following:</p> <pre><code>from pathlib import Path\n\nfrom snk_cli import CLI\n\nworkflow_name = CLI(Path(__file__).parent.parent)\n</code></pre> <p>Note</p> <p>Remember to replace <code>workflow_name</code> with the name of your tool</p>"},{"location":"workflow_packages/#adding-the-workflow","title":"Adding the workflow","text":"<p>All that's left to do it add the Snakemake workflow. The simplest way to do this is to add a <code>Snakefile</code> and <code>config</code>. Here we add a simple workflow that saves a message to a file. </p> <pre><code># src/workflow_name/workflow/Snakefile\nconfigfile: \"config.yaml\"\n\nrule hello_world:\n    output: config['output']\n    params:\n        text=config['text']\n    shell: \"echo {params.text} &gt; {output}\"\n</code></pre> <pre><code># src/workflow_name/config.yaml\ntext: \"hello world!\"\noutput: \"message.txt\"\n</code></pre> <p>Resulting in the following project structure:</p> <pre><code>workflow-name\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 workflow_name\n\u2502       \u251c\u2500\u2500 __about__.py\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __main__.py\n\u2502       \u251c\u2500\u2500 cli\n\u2502       \u2502   \u2514\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 config.yaml &lt;-\n\u2502       \u2514\u2500\u2500 workflow\n\u2502           \u2514\u2500\u2500 Snakefile &lt;-\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Activate the hatch env with <code>hatch shell</code> (this will install the workflow in development mode).</p> <p>You can now test the workflow is working with <code>workflow-name -h</code> which should return the following:</p> <pre><code> Usage: workflow-name [OPTIONS] COMMAND [ARGS]...                           \n\n        _             _  _                                                  \n  _ __ (_) _ __  ___ | |(_) _ _   ___       _ _   __ _  _ __   ___          \n | '_ \\| || '_ \\/ -_)| || || ' \\ / -_)     | ' \\ / _` || '  \\ / -_)         \n | .__/|_|| .__/\\___||_||_||_||_|\\___| ___ |_||_|\\__,_||_|_|_|\\___|         \n |_|      |_|                         |___|                                 \n A Snakemake workflow CLI generated with snk                                \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v        Show the workflow version.               \u2502\n\u2502 --path                -p        Show the workflow path.                  \u2502\n\u2502 --install-completion            Install completion for the current       \u2502\n\u2502                                 shell.                                   \u2502\n\u2502 --show-completion               Show completion for the current shell,   \u2502\n\u2502                                 to copy it or customize the              \u2502\n\u2502                                 installation.                            \u2502\n\u2502 --help                -h        Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 config     Access the workflow configuration.                            \u2502\n\u2502 env        Access the workflow conda environments.                       \u2502\n\u2502 info       Display information about current workflow install.           \u2502\n\u2502 profile    Access the workflow profiles.                                 \u2502\n\u2502 run        Run the dynamically generated workflow CLI.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Run the workflow with <code>workflow-name run --text \"Hello from Snakemake\"</code></p> <pre><code>       _             _  _                                         \n _ __ (_) _ __  ___ | |(_) _ _   ___       _ _   __ _  _ __   ___ \n| '_ \\| || '_ \\/ -_)| || || ' \\ / -_)     | ' \\ / _` || '  \\ / -_)\n| .__/|_|| .__/\\___||_||_||_||_|\\___| ___ |_||_|\\__,_||_|_|_|\\___|\n|_|      |_|                         |___|                        \nA Snakemake workflow CLI generated with snk\n\nBuilding DAG of jobs...\nUsing shell: /bin/bash\nProvided cores: 8\nRules claiming more threads will be scaled down.\nJob stats:\njob            count    min threads    max threads\n-----------  -------  -------------  -------------\nhello_world        1              1              1\ntotal              1              1              1\n\nSelect jobs to execute...\n\n[Wed May 31 14:21:44 2023]\nrule hello_world:\n    output: message.txt\n    jobid: 0\n    reason: Missing output files: message.txt\n    resources: tmpdir=/var/folders/hs/3sl81nqd6mzcbz1sc_td3bv00000gn/T\n\n[Wed May 31 14:21:45 2023]\nFinished job 0.\n1 of 1 steps (100%) done\nComplete log: .snakemake/log/2023-05-31T142144.694274.snakemake.log\n</code></pre> <p>We can also add a <code>snk.yaml</code> file to add annotations to the CLI. See Snk Config docs for details.</p> <pre><code>workflow-name\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 workflow_name\n\u2502       \u251c\u2500\u2500 __about__.py\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __main__.py\n\u2502       \u251c\u2500\u2500 snk.yaml &lt;-\n\u2502       \u251c\u2500\u2500 cli\n\u2502       \u2502   \u2514\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 config.yaml\n\u2502       \u2514\u2500\u2500 workflow\n\u2502           \u2514\u2500\u2500 Snakefile\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>At this point you can delete the <code>config.yaml</code> file and use the <code>snk.yaml</code> file to specify the parameters for your workflow. The <code>snk.yaml</code> file will be used to generate the CLI, and the parameters will be available in the <code>config</code> dictionary in your <code>Snakefile</code> (just remember to set defaults!).  </p> <pre><code>cli:\n  text:\n    type: str\n    help: \"The message to save to the file\"\n    default: \"hello world!\"\n  output:\n    type: path\n    help: \"The path to save the message to\"\n    default: \"message.txt\"\n</code></pre>"},{"location":"workflow_packages/#add-additional-commands-to-the-workflow","title":"Add additional commands to the workflow","text":"<p>To add commands to the workflow cli you can access the underlying typer app:</p> <pre><code>from pathlib import Path\n\nfrom snk_cli import CLI\n\nworkflow_name = CLI(workflow_dir_path = Path(__file__).parent.parent)\n\n@workflow_name.app.command()\ndef hello(name: str):\n    print(f\"Hello {name}!\")\n</code></pre> <p>You can now access the hello command from the workflow cli e.g.</p> <pre><code>\u276f workflow-name hello Wytamma\nHello Wytamma!\n</code></pre>"},{"location":"workflow_packages/#publishing-the-workflow","title":"Publishing the workflow","text":"<p>You can use hatch to build and publish your workflow to PYPI (requires PYPI account).</p> <p>To build run <code>hatch build</code> </p> <pre><code>\u276f hatch build  \n[sdist]\ndist/workflow_name-0.0.1.tar.gz\n\n[wheel]\ndist/workflow_name-0.0.1-py3-none-any.whl\n</code></pre> <p>To publish run <code>hatch publish</code></p> <pre><code>\u276f hatch publish\ndist/workflow_name-0.0.1-py3-none-any.whl ... success\ndist/workflow_name-0.0.1.tar.gz ... success\n\n[workflow-name]\nhttps://pypi.org/project/workflow-name/0.0.1/\n</code></pre> <p>The workflow is now on pypi and can be installed with <code>pip</code>!</p> <pre><code>pip install workflow-name\n</code></pre> <p>Your workflow is now installed as a CLI package.</p> <pre><code>workflow-name -h\n</code></pre>"},{"location":"reference/nest/","title":"Nest","text":""},{"location":"reference/nest/#snk.nest.Nest","title":"<code>Nest</code>","text":"<p>Initializes a Nest object.</p> <p>Parameters:</p> Name Type Description Default <code>snk_home</code> <code>Path</code> <p>The path to the SNK home directory. Defaults to None.</p> <code>None</code> <code>bin_dir</code> <code>Path</code> <p>The path to the bin directory. Defaults to None.</p> <code>None</code> Side Effects <p>Creates the SNK home and bin directories if they do not exist.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest = Nest()\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>class Nest:\n    \"\"\"\n    Initializes a Nest object.\n\n    Args:\n      snk_home (Path, optional): The path to the SNK home directory. Defaults to None.\n      bin_dir (Path, optional): The path to the bin directory. Defaults to None.\n\n    Side Effects:\n      Creates the SNK home and bin directories if they do not exist.\n\n    Examples:\n      &gt;&gt;&gt; nest = Nest()\n    \"\"\"\n\n    def __init__(self, snk_home: Path = None, bin_dir: Path = None) -&gt; None:\n        \"\"\"\n        Initializes a Nest object.\n\n        Args:\n          snk_home (Path, optional): The path to the SNK home directory. Defaults to None.\n          bin_dir (Path, optional): The path to the bin directory. Defaults to None.\n\n        Side Effects:\n          Creates the SNK home and bin directories if they do not exist.\n\n        Examples:\n          &gt;&gt;&gt; nest = Nest()\n        \"\"\"\n        self.python_interpreter_path = Path(\n            sys.executable\n        )  # needs to be the same python that has snk\n\n        if not snk_home:\n            home_path = self.python_interpreter_path.parent.parent\n            if not os.access(home_path, os.W_OK):\n                user_home_path = Path(\"~\").expanduser()\n                snk_home = user_home_path / \".local\" / \"snk\"\n            else:\n                snk_home = home_path / \"snk\"\n\n        if not bin_dir:\n            bin_dir = self.python_interpreter_path.parent\n            if not os.access(bin_dir, os.W_OK):\n                user_home_path = Path(\"~\").expanduser()\n                bin_dir = user_home_path / \".local\" / \"bin\"\n\n        self.bin_dir = Path(bin_dir).absolute()\n        self.snk_home = Path(snk_home).absolute()\n        self.snk_workflows_dir = self.snk_home / \"workflows\"\n        self.snk_venv_dir = self.snk_home / \"venvs\"\n        self.snk_executable_dir = self.snk_home / \"bin\"\n\n        # Create dirs\n        self.snk_home.mkdir(parents=True, exist_ok=True)\n        self.snk_workflows_dir.mkdir(parents=True, exist_ok=True)\n        self.snk_executable_dir.mkdir(parents=True, exist_ok=True)\n        self.bin_dir.mkdir(parents=True, exist_ok=True)\n\n    def bin_dir_in_path(self) -&gt; bool:\n        path_dirs = os.environ[\"PATH\"].split(os.pathsep)\n        return str(self.bin_dir) in path_dirs\n\n    def _format_repo_url(self, repo: str):\n        \"\"\"\n        Checks that the given repo URL is valid.\n\n        Args:\n          repo (str): The URL of the repo.\n\n        Raises:\n          InvalidWorkflowRepositoryError: If the repo URL is not valid.\n\n        Examples:\n          &gt;&gt;&gt; nest._format_repo_url(\"https://github.com/example/repo.git\")\n        \"\"\"\n        if not repo.endswith(\".git\"):\n            repo += \".git\"\n        if not repo.startswith(\"http\"):\n            raise InvalidWorkflowRepositoryError(\"Repo url must start with http\")\n        return repo\n\n    def install(\n        self,\n        workflow: str,\n        editable=False,\n        name=None,\n        tag=None,\n        commit=None,\n        config: Path = None,\n        snakefile: Path = None,\n        force=False,\n        additional_resources=[],\n        conda: bool = None,\n        snakemake_version=None,\n        dependencies=[],\n        isolate=False,\n    ) -&gt; Workflow:\n        \"\"\"\n        Installs a Snakemake workflow as a CLI.\n\n        Args:\n          workflow (str): The URL of the repo or the path to the local workflow.\n          editable (bool, optional): Whether to install the workflow in editable mode. Defaults to False.\n          name (str, optional): The name of the workflow. Defaults to None.\n          tag (str, optional): The tag of the workflow. Defaults to None.\n          commit (str, optional): The commit SHA of the workflow. Defaults to None.\n          config (Path, optional): The path to the snakemake config file. Defaults to None.\n          snakefile (Path, optional): The path to the Snakefile. Defaults to None.\n          force (bool, optional): Whether to force the installation. Defaults to False.\n          additional_resources (list, optional): A list of resources additional to the resources folder to copy. Defaults to [].\n          conda (bool, optional): Modify the snk config file to control conda use. If None, will not modify the config file. Defaults to None.\n          snakemake_version (str, optional): The version of Snakemake to install in the virtual environment. Defaults to None.\n          dependencies (list, optional): A list of dependencies to install. Defaults to [].\n        Returns:\n          Workflow: The installed workflow.\n\n        Examples:\n          &gt;&gt;&gt; nest.install(\n          ...     \"https://github.com/example/repo.git\", name=\"example\", tag=\"v1.0.0\"\n          ... )\n          &gt;&gt;&gt; nest.install(\n          ...     \"https://github.com/example/repo.git\", name=\"example\", commit=\"0123456\"\n          ... )\n        \"\"\"\n\n        def handle_force_installation(name: str):\n            try:\n                self.uninstall(name=name, force=True)\n            except WorkflowNotFoundError:\n                pass\n\n        workflow = str(workflow)  # ensure it is a string\n        try:\n            workflow = self._format_repo_url(workflow)\n            if not name:\n                name = self._get_name_from_git_url(workflow)\n            if not force:\n                self._check_workflow_name_available(name)\n            else:\n                handle_force_installation(name)\n            workflow_path = self.download(workflow, name, tag_name=tag, commit=commit)\n        except WorkflowNotFoundError as e:\n            to_remove = self.get_paths_to_delete(name)\n            self.delete_paths(to_remove)\n            raise e\n        except InvalidWorkflowRepositoryError:\n            workflow_local_path = Path(workflow).resolve()\n            if workflow_local_path.is_file():\n                raise InvalidWorkflowError(\n                    f\"When installing a local workflow, the path must be a directory. Found: {workflow_local_path}\"\n                )\n            if (\n                self.snk_workflows_dir.resolve().is_relative_to(workflow_local_path)\n                and not editable\n            ):\n                raise InvalidWorkflowError(\n                    f\"The workflow directory contains SNK_HOME!\\nWORKFLOW: {workflow_local_path}\\nSNK_HOME: {self.snk_workflows_dir.resolve()}.\\n\\nTry installing the workflow with --editable.\"\n                )\n            if not name:\n                name = workflow_local_path.name\n            if not force:\n                self._check_workflow_name_available(name)\n            else:\n                handle_force_installation(name)\n            workflow_path = self.local(workflow_local_path, name, editable)\n        try:\n            self.validate_Snakemake_repo(workflow_path)\n            # update non standard files\n            if config:\n                config_path = workflow_path / config\n                if not config_path.exists():\n                    raise FileNotFoundError(f\"Config file not found at {config_path}\")\n                self.modify_snk_config(workflow_path, configfile=config_path)\n            if snakefile:\n                snakefile_path = workflow_path / snakefile\n                if not snakefile_path.exists():\n                    raise FileNotFoundError(f\"Snakefile not found at {snakefile_path}\")\n                self.modify_snk_config(workflow_path, snakefile=snakefile_path)\n            # set the version of the workflow\n            if editable:\n                version = \"editable\"\n            elif tag:\n                version = tag\n            elif commit:\n                version = commit\n            else:\n                try:\n                    repo = Repo(workflow_path)\n                    sha = repo.head.object.hexsha\n                    version = repo.git.rev_parse(sha, short=8)\n                except Exception:\n                    version = None\n            self.modify_snk_config(workflow_path, version=version)\n            # check if we need to install snakemake in a virtual environment\n            snakemake_version_to_install_in_venv = None\n            snakemake_min_version = self.check_for_snakemake_min_version(workflow_path, snakefile)\n            if snakemake_version is not None:\n                snakemake_version_to_install_in_venv = snakemake_version\n                if parse_version(self._current_snakemake_version) &lt; parse_version(\n                    snakemake_min_version\n                ):\n                    # The current version of Snakemake is less than the minimum version required by the workflow\n                    snakemake_version_to_install_in_venv = f\"&gt;={snakemake_min_version}\"\n            min_snk_cli_version = self.check_for_snk_cli_min_version(workflow_path)\n            snk_cli_in_deps = len([dep for dep in dependencies if \"snk_cli\" in dep]) &gt; 0\n            if min_snk_cli_version is not None and not snk_cli_in_deps:\n                if parse_version(self._current_snk_cli_version) &lt; parse_version(\n                    min_snk_cli_version\n                ):\n                    # The current version of Snakemake is less than the minimum version required by the workflow\n                    dependencies.append(f\"snk_cli&gt;={min_snk_cli_version}\")\n            if snakemake_version_to_install_in_venv is not None or dependencies:\n                isolate = True\n            if isolate:\n                venv_path = self.create_virtual_environment(name)\n                self._install_snk_cli_in_venv(\n                    venv_path,\n                    snakemake_version=snakemake_version_to_install_in_venv,\n                    dependencies=dependencies,\n                )\n                python_interpreter_path = venv_path / \"bin\" / \"python\"\n            else:\n                python_interpreter_path = self.python_interpreter_path\n            # create the workflow executable\n            workflow_executable_path = self.create_executable(\n                workflow_path, name, python_interpreter_path=python_interpreter_path\n            )\n            self.link_workflow_executable_to_bin(workflow_executable_path)\n            if additional_resources:\n                self.additional_resources(workflow_path, additional_resources)\n            if conda is not None:\n                self.modify_snk_config(workflow_path, conda=conda)\n            self._confirm_installation(name)\n        except Exception as e:\n            # remove any half completed steps\n            to_remove = self.get_paths_to_delete(name)\n            self.delete_paths(to_remove)\n            raise e\n        return Workflow(workflow_path)\n\n    def modify_snk_config(self, workflow_path: Path, **kwargs):\n        \"\"\"\n        Modify the snk config file.\n\n        Args:\n          workflow_path (Path): The path to the workflow directory.\n          **kwargs: Additional keyword arguments to modify the snk config file.\n\n        Examples:\n          &gt;&gt;&gt; nest.modify_snk_config(Path(\"/path/to/workflow\"), logo=example)\n        \"\"\"\n        snk_config = SnkConfig.from_workflow_dir(workflow_path, create_if_not_exists=True)\n        modified = False\n        for key, value in kwargs.items():\n            if getattr(snk_config, key) != value:\n                modified = True\n                setattr(snk_config, key, value)\n        if modified:\n            snk_config.save()\n\n    def additional_resources(self, workflow_path: Path, resources: List[Path]):\n        \"\"\"\n        Modify the snk config file so that resources will be copied at runtime.\n\n        Args:\n          workflow_path (Path): The path to the workflow directory.\n          resources (List[Path]): A list of additional resources to copy.\n\n        Examples:\n          &gt;&gt;&gt; nest.additional_resources(\n          ...     Path(\"/path/to/workflow\"),\n          ...     [Path(\"/path/to/resource1\"), Path(\"/path/to/resource2\")],\n          ... )\n        \"\"\"\n        # validate_resources(resources)\n        snk_config = SnkConfig.from_workflow_dir(workflow_path, create_if_not_exists=True)\n        snk_config.add_resources(resources, workflow_path)\n        snk_config.save()\n\n    def copy_nonstandard_config(self, workflow_dir: Path, config_path: Path):\n        \"\"\"\n        Copy a nonstandard config file to the workflow directory.\n\n        Args:\n          workflow_dir (Path): The path to the workflow directory.\n          config_path (Path): The path to the config file.\n\n        Examples:\n          &gt;&gt;&gt; nest.copy_nonstandard_config(\n          ...     Path(\"/path/to/workflow\"), Path(\"/path/to/config.yaml\")\n          ... )\n        \"\"\"\n        config_dir = workflow_dir / \"config\"\n        config_dir.mkdir(exist_ok=True)\n        shutil.copyfile(workflow_dir / config_path, config_dir / \"config.yaml\")\n\n    def get_paths_to_delete(self, workflow_name: str) -&gt; List[Path]:\n        \"\"\"\n        Get the paths to delete when uninstalling a workflow.\n\n        Args:\n          workflow_name (str): The name of the workflow.\n\n        Returns:\n          List[Path]: A list of paths to delete.\n\n        Examples:\n          &gt;&gt;&gt; nest.get_paths_to_delete(\"example\")\n          [Path('/path/to/workflows/example'), Path('/path/to/bin/example')]\n        \"\"\"\n        to_delete = []\n\n        # remove repo\n        workflow_dir = self.snk_workflows_dir / workflow_name\n        if workflow_dir.exists() and workflow_dir.is_dir():\n            to_delete.append(workflow_dir)\n        elif workflow_dir.is_symlink():\n            # editable\n            to_delete.append(workflow_dir)\n\n        workflow_executable = self.snk_executable_dir / workflow_name\n        if workflow_executable.exists():\n            to_delete.append(workflow_executable)\n\n        # remove venv\n        venv_path = self.snk_venv_dir / workflow_name\n        if venv_path.exists():\n            to_delete.append(venv_path)\n\n        # remove link\n        workflow_symlink_executable = self.bin_dir / workflow_name\n        if workflow_symlink_executable.is_symlink():\n            if str(os.readlink(workflow_symlink_executable)) == str(workflow_executable):\n                to_delete.append(workflow_symlink_executable)\n\n        return to_delete\n\n    def delete_paths(self, files: List[Path]):\n        \"\"\"\n        Delete the given paths.\n\n        Args:\n          files (List[Path]): A list of paths to delete.\n\n        Side Effects:\n          Deletes the given paths.\n\n        Examples:\n          &gt;&gt;&gt; nest.delete_paths(\n          ...     [Path(\"/path/to/workflows/example\"), Path(\"/path/to/bin/example\")]\n          ... )\n        \"\"\"\n        # check that the files are in self.snk_workflows_dir\n        # i.e. if it is a symlink read the link and check\n        for path in files:\n            if path.is_symlink():\n                print(\"Unlinking:\", path)\n                path.unlink()\n            elif path.is_file():\n                print(\"Deleting:\", path)\n                assert str(self.snk_home) in str(path), \"Cannot delete files outside of SNK_HOME\"\n                path.unlink()\n            elif path.is_dir():\n                print(\"Deleting:\", path)\n                assert str(self.snk_home) in str(path), \"Cannot delete folders outside of SNK_HOME\"\n                shutil.rmtree(path)\n            else:\n                raise TypeError(\"Invalid file type\")\n\n    def uninstall(self, name: str, force: bool = False) -&gt; bool:\n        \"\"\"\n        Uninstalls a workflow.\n\n        Args:\n          name (str): The name of the workflow.\n          force (bool, optional): Whether to force the uninstallation. Defaults to False.\n\n        Returns:\n          bool: Whether the uninstallation was successful.\n\n        Examples:\n          &gt;&gt;&gt; nest.uninstall(\"example\")\n          True\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(f\"Name must be a string. Found: {name}\")\n        to_remove = self.get_paths_to_delete(name)\n        if not to_remove:\n            raise WorkflowNotFoundError(f\"Workflow '{name}' not found\")\n        if force:\n            proceed = True\n        else:\n            print(f\"Uninstalling {name}\")\n            print(\"  Would remove:\")\n            for p in to_remove:\n                print(f\"    {p}{'/*' if p.is_dir() else ''}\")\n            ans = input(\"Proceed (Y/n)? \")\n            proceed = ans.lower() in [\"y\", \"yes\", \"\"]\n        if not proceed:\n            return False\n        self.delete_paths(to_remove)\n        return True\n\n    def _check_workflow_name_available(self, name: str):\n        if not name:\n            return None\n        if name in os.listdir(self.snk_workflows_dir):\n            raise WorkflowExistsError(\n                f\"Workflow '{name}' already exists in SNK_HOME ({self.snk_workflows_dir})\"\n            )\n\n        if name in os.listdir(self.bin_dir):\n            # check if orfan symlink\n            def is_orfan_symlink(name):\n                return (self.bin_dir / name).is_symlink() and str(self.snk_home) in os.readlink(\n                    self.bin_dir / name\n                )\n\n            if is_orfan_symlink(name):\n                self.delete_paths([self.bin_dir / name])\n            else:\n                raise WorkflowExistsError(\n                    f\"File '{name}' already exists in SNK_BIN ({self.bin_dir})\"\n                )\n\n    def _confirm_installation(self, name: str):\n        \"\"\"\n        Confirms that the installation was successful.\n\n        Args:\n          name (str): The name of the workflow.\n\n        Examples:\n          &gt;&gt;&gt; nest._confirm_installation(\"example\")\n        \"\"\"\n        workflow_dir = self.snk_workflows_dir / name\n        assert workflow_dir.exists()\n        workflows = [p.name.split(\".\")[0] for p in self.bin_dir.glob(\"*\")]\n        assert name in workflows\n\n    def _get_name_from_git_url(self, git_url: str):\n        \"\"\"\n        Gets the name of the workflow from the git URL.\n\n        Args:\n          git_url (str): The URL of the git repository.\n\n        Returns:\n          str: The name of the workflow.\n        \"\"\"\n        return git_url.split(\"/\")[-1].split(\".\")[0]\n\n    @property\n    def workflows(self):\n        return [\n            Workflow(workflow_dir.absolute()) for workflow_dir in self.snk_workflows_dir.glob(\"*\")\n        ]\n\n    def download(self, repo_url: str, name: str, tag_name: str = None, commit: str = None) -&gt; Path:\n        \"\"\"\n        Clone a workflow from a git repository.\n\n        Args:\n          repo_url (str): The URL of the repo.\n          name (str): The name of the workflow.\n          tag_name (str, optional): The tag of the workflow. Defaults to None.\n          commit (str, optional): The commit SHA of the workflow. Defaults to None.\n\n        Returns:\n          Path: The path to the cloned workflow.\n\n        Examples:\n          &gt;&gt;&gt; nest.download(\n          ...     \"https://github.com/example/repo.git\", \"example\", tag_name=\"v1.0.0\"\n          ... )\n        \"\"\"\n        location = self.snk_workflows_dir / name\n        options = []\n        if not commit:\n            options.append(\"--depth 1\")\n        if tag_name:\n            options.append(\"--single-branch\")\n            options.append(f\"--branch {tag_name}\")\n        try:\n            repo = Repo.clone_from(repo_url, location, multi_options=options)\n            if commit:\n                repo.git.checkout(commit)\n            else:\n                repo.git.checkout(tag_name)\n        except GitCommandError as e:\n            if \"destination path\" in e.stderr:\n                raise WorkflowExistsError(\n                    f\"Workflow '{name}' already exists in {self.snk_workflows_dir}\"\n                )\n            elif f\"Remote branch {tag_name}\" in e.stderr:\n                did_you_mean = \"\"\n                if len(tag_name) &lt; 6:\n                    did_you_mean = f\". Did you mean 'v{tag_name}'?\"\n                raise WorkflowNotFoundError(f\"Workflow tag '{tag_name}' not found{did_you_mean}\")\n            elif f\"pathspec '{commit}' did not match\" in e.stderr:\n                if tag_name:\n                    raise WorkflowNotFoundError(\n                        f\"Workflow commit '{commit}' not found on branch {tag_name}\"\n                    )\n                else:\n                    raise WorkflowNotFoundError(f\"Workflow commit '{commit}' not found\")\n            elif \"not found\" in e.stderr:\n                raise WorkflowNotFoundError(f\"Workflow repository '{repo_url}' not found\")\n            raise e\n        return location\n\n    def local(self, path: Path, name: str, editable=False) -&gt; Path:\n        \"\"\"\n        Install a local workflow.\n\n        Args:\n          path (Path): The path to the local workflow.\n          name (str): The name of the workflow.\n          editable (bool, optional): Whether to install the workflow in editable mode. Defaults to False.\n\n        Returns:\n          Path: The path to the installed workflow.\n\n        Examples:\n          &gt;&gt;&gt; nest.local(Path(\"/path/to/workflow\"), \"example\")\n        \"\"\"\n        location = self.snk_workflows_dir / name\n        if editable:\n            os.symlink(path.absolute(), location, target_is_directory=True)\n            return location\n        shutil.copytree(path, location)\n        try:\n            Repo(location)\n        except InvalidGitRepositoryError:\n            Repo.init(location, mkdir=False)\n        return location\n\n    def create_virtual_environment(self, name: str) -&gt; Path:\n        \"\"\"\n        Create a virtual environment for the workflow.\n\n        Args:\n          name (str): The name of the virtual environment.\n          snakemake_version (str, optional): The version of Snakemake to install in the virtual environment. Defaults to None.\n\n        Returns:\n          Path: The path to the virtual environment.\n\n        Examples:\n          &gt;&gt;&gt; nest.create_virtual_environment(\"example\")\n        \"\"\"\n        venv_dir = self.snk_home / \"venvs\"\n        venv_dir.mkdir(exist_ok=True)\n        venv_path = venv_dir / name\n        try:\n            venv.create(venv_path, with_pip=True, symlinks=True)\n        except FileExistsError:\n            raise FileExistsError(\n                f\"The venv {venv_path} already exists. Please choose a different location or name. Alternatively, use the --force flag to overwrite the existing venv.\"\n            )\n        return venv_path\n\n    def _install_snk_cli_in_venv(self, venv_path: Path, snakemake_version=None, dependencies=[]):\n        \"\"\"\n        Install snk_cli in the virtual environment.\n\n        Args:\n          venv_path (Path): The path to the virtual environment.\n          snakemake_version (str, optional): The version of Snakemake to install in the virtual\n          environment. Defaults to \"7.32.4\".\n\n        Examples:\n          &gt;&gt;&gt; nest._install_snk_cli_in_venv(Path(\"/path/to/venv\"), snakemake_version=\"7.32.4\")\n        \"\"\"\n        if not venv_path.exists():\n            raise FileNotFoundError(f\"Virtual environment not found at {venv_path}\")\n        if sys.platform.startswith(\"win\"):\n            pip_path = venv_path / \"Scripts\" / \"pip.exe\"\n        else:\n            pip_path = venv_path / \"bin\" / \"pip\"\n        if not pip_path.exists():\n            raise FileNotFoundError(f\"pip not found at {pip_path}\")\n        # check if snakemake version starts with &gt;= or &lt;=\n        if snakemake_version:\n            # check if snakemake version starts with &gt;, &lt;, =, ~, ^,\n            if snakemake_version[0] in [\"&gt;\", \"&lt;\", \"=\"]:\n                snakemake_version = f\"snakemake{snakemake_version}\"\n            else:\n                snakemake_version = f\"snakemake=={snakemake_version}\"\n        else:\n            snakemake_version = \"snakemake\"\n        try:\n            snk_cli_in_deps = len([dep for dep in dependencies if \"snk_cli\" in dep]) &gt; 0\n            if not snk_cli_in_deps:\n                dependencies.append(\"snk_cli\")\n            subprocess.run(\n                [pip_path, \"install\", snakemake_version, \"setuptools\"] + dependencies,\n                check=True,\n            )\n        except subprocess.CalledProcessError as e:\n            raise Exception(f\"Failed to install snk_cli in virtual environment. Error: {e}\")\n\n    def create_executable(\n        self, workflow_path: Path, name: str, python_interpreter_path=None\n    ) -&gt; Path:\n        if not python_interpreter_path:\n            python_interpreter_path = self.python_interpreter_path\n        template = inspect.cleandoc(\n            f\"\"\"\n            #!/bin/sh\n            '''exec' \"{python_interpreter_path}\" \"$0\" \"$@\"\n            ' '''\n            # -*- coding: utf-8 -*-\n            import re\n            import sys\n            from pathlib import Path\n            from snk_cli import CLI\n\n            def create_cli(p):\n                workflow_dir_path = Path(p)\n                cli = CLI(workflow_dir_path)\n                cli()\n\n            if __name__ == \"__main__\":\n                sys.argv[0] = re.sub(r'(-script\\\\.pyw|\\\\.exe)?$', '', sys.argv[0])\n                sys.exit(create_cli(\"{workflow_path}\"))\n\n        \"\"\"\n        )\n\n        if sys.platform.startswith(\"win\"):\n            name += \".exe\"\n\n        workflow_executable = self.snk_executable_dir / name\n\n        with open(workflow_executable, \"w\") as f:\n            f.write(template)\n\n        workflow_executable.chmod(workflow_executable.stat().st_mode | stat.S_IEXEC)\n\n        return workflow_executable\n\n    def link_workflow_executable_to_bin(self, workflow_executable_path: Path):\n        \"\"\"\n        Links a workflow executable to the bin directory.\n\n        Args:\n          workflow_executable_path (Path): The path to the workflow executable.\n\n        Returns:\n          Path: The path to the linked workflow executable.\n\n        Examples:\n          &gt;&gt;&gt; nest.link_workflow_executable_to_bin(Path(\"/path/to/workflow_executable\"))\n        \"\"\"\n        name = workflow_executable_path.name\n        if (self.bin_dir / name).is_symlink() and os.readlink(self.bin_dir / name) == str(\n            workflow_executable_path\n        ):\n            # skip if it's already there\n            return self.bin_dir / name\n        try:\n            os.symlink(workflow_executable_path.absolute(), self.bin_dir / name)\n        except FileExistsError:\n            raise WorkflowExistsError(f\"File '{name}' already exists in SNK_BIN ({self.bin_dir})\")\n        return self.bin_dir / name\n\n    def check_for_snakemake_min_version(self, workflow_path: Path, snakefile: Path = None):\n        \"\"\"\n        Check if the workflow has a minimum version of Snakemake.\n\n        Args:\n          workflow_path (Path): The path to the workflow directory.\n\n        Returns:\n          str: The minimum version of Snakemake.\n\n        Examples:\n          &gt;&gt;&gt; nest.check_for_snakemake_min_version(Path(\"/path/to/workflow\"))\n        \"\"\"\n        import re\n\n        min_version = \"0.0.0\"\n        if snakefile:\n            snakefile = workflow_path / snakefile\n        else:\n            for snakefile in workflow_path.glob(\"**/Snakefile\"):\n                if snakefile.exists():\n                    break\n            else:\n                return min_version\n        with open(snakefile, \"r\") as f:\n            for line in f:\n                match = re.search(r\"min_version\\((.*)\\)\", line)\n                if match:\n                    min_version = match.group(1).strip().strip('\"').strip(\"'\")\n                    break\n        return min_version\n\n    @property\n    def _current_snakemake_version(self):\n        \"\"\"\n        Get the current version of Snakemake.\n\n        Returns:\n          str: The current version of Snakemake.\n\n        Examples:\n          &gt;&gt;&gt; nest.get_current_current_snakemake_version()\n        \"\"\"\n        from snakemake.common import __version__\n\n        return __version__\n\n    def check_for_snk_cli_min_version(self, workflow_path: Path):\n        \"\"\"\n        Check if the workflow has a minimum version of snk_cli.\n\n        Args:\n          workflow_path (Path): The path to the workflow directory.\n\n        Returns:\n          str: The minimum version of snk_cli.\n\n        Examples:\n          &gt;&gt;&gt; nest.check_for_snk_cli_min_version(Path(\"/path/to/workflow\"))\n        \"\"\"\n        snk_config = SnkConfig.from_workflow_dir(workflow_path, create_if_not_exists=True)\n        try:\n            return snk_config.min_snk_cli_version\n        except AttributeError:\n            return None\n\n    @property\n    def _current_snk_cli_version(self):\n        \"\"\"\n        Get the current version of snk_cli.\n\n        Returns:\n          str: The current version of snk_cli.\n\n        Examples:\n          &gt;&gt;&gt; nest.get_current_current_snk_cli_version()\n        \"\"\"\n        from snk_cli.__about__ import __version__\n\n        return __version__\n\n    def validate_Snakemake_repo(self, repo: Repo):\n        \"\"\"\n        Validates a Snakemake repository.\n\n        Args:\n          repo (Repo): The Snakemake repository.\n\n        Returns:\n          bool: True if the repository is valid, False otherwise.\n\n        Examples:\n          &gt;&gt;&gt; nest.validate_Snakemake_repo(Repo(\"/path/to/repo\"))\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.__init__","title":"<code>__init__(snk_home=None, bin_dir=None)</code>","text":"<p>Initializes a Nest object.</p> <p>Parameters:</p> Name Type Description Default <code>snk_home</code> <code>Path</code> <p>The path to the SNK home directory. Defaults to None.</p> <code>None</code> <code>bin_dir</code> <code>Path</code> <p>The path to the bin directory. Defaults to None.</p> <code>None</code> Side Effects <p>Creates the SNK home and bin directories if they do not exist.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest = Nest()\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def __init__(self, snk_home: Path = None, bin_dir: Path = None) -&gt; None:\n    \"\"\"\n    Initializes a Nest object.\n\n    Args:\n      snk_home (Path, optional): The path to the SNK home directory. Defaults to None.\n      bin_dir (Path, optional): The path to the bin directory. Defaults to None.\n\n    Side Effects:\n      Creates the SNK home and bin directories if they do not exist.\n\n    Examples:\n      &gt;&gt;&gt; nest = Nest()\n    \"\"\"\n    self.python_interpreter_path = Path(\n        sys.executable\n    )  # needs to be the same python that has snk\n\n    if not snk_home:\n        home_path = self.python_interpreter_path.parent.parent\n        if not os.access(home_path, os.W_OK):\n            user_home_path = Path(\"~\").expanduser()\n            snk_home = user_home_path / \".local\" / \"snk\"\n        else:\n            snk_home = home_path / \"snk\"\n\n    if not bin_dir:\n        bin_dir = self.python_interpreter_path.parent\n        if not os.access(bin_dir, os.W_OK):\n            user_home_path = Path(\"~\").expanduser()\n            bin_dir = user_home_path / \".local\" / \"bin\"\n\n    self.bin_dir = Path(bin_dir).absolute()\n    self.snk_home = Path(snk_home).absolute()\n    self.snk_workflows_dir = self.snk_home / \"workflows\"\n    self.snk_venv_dir = self.snk_home / \"venvs\"\n    self.snk_executable_dir = self.snk_home / \"bin\"\n\n    # Create dirs\n    self.snk_home.mkdir(parents=True, exist_ok=True)\n    self.snk_workflows_dir.mkdir(parents=True, exist_ok=True)\n    self.snk_executable_dir.mkdir(parents=True, exist_ok=True)\n    self.bin_dir.mkdir(parents=True, exist_ok=True)\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.additional_resources","title":"<code>additional_resources(workflow_path, resources)</code>","text":"<p>Modify the snk config file so that resources will be copied at runtime.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_path</code> <code>Path</code> <p>The path to the workflow directory.</p> required <code>resources</code> <code>List[Path]</code> <p>A list of additional resources to copy.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.additional_resources(\n...     Path(\"/path/to/workflow\"),\n...     [Path(\"/path/to/resource1\"), Path(\"/path/to/resource2\")],\n... )\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def additional_resources(self, workflow_path: Path, resources: List[Path]):\n    \"\"\"\n    Modify the snk config file so that resources will be copied at runtime.\n\n    Args:\n      workflow_path (Path): The path to the workflow directory.\n      resources (List[Path]): A list of additional resources to copy.\n\n    Examples:\n      &gt;&gt;&gt; nest.additional_resources(\n      ...     Path(\"/path/to/workflow\"),\n      ...     [Path(\"/path/to/resource1\"), Path(\"/path/to/resource2\")],\n      ... )\n    \"\"\"\n    # validate_resources(resources)\n    snk_config = SnkConfig.from_workflow_dir(workflow_path, create_if_not_exists=True)\n    snk_config.add_resources(resources, workflow_path)\n    snk_config.save()\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.check_for_snakemake_min_version","title":"<code>check_for_snakemake_min_version(workflow_path, snakefile=None)</code>","text":"<p>Check if the workflow has a minimum version of Snakemake.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_path</code> <code>Path</code> <p>The path to the workflow directory.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The minimum version of Snakemake.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.check_for_snakemake_min_version(Path(\"/path/to/workflow\"))\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def check_for_snakemake_min_version(self, workflow_path: Path, snakefile: Path = None):\n    \"\"\"\n    Check if the workflow has a minimum version of Snakemake.\n\n    Args:\n      workflow_path (Path): The path to the workflow directory.\n\n    Returns:\n      str: The minimum version of Snakemake.\n\n    Examples:\n      &gt;&gt;&gt; nest.check_for_snakemake_min_version(Path(\"/path/to/workflow\"))\n    \"\"\"\n    import re\n\n    min_version = \"0.0.0\"\n    if snakefile:\n        snakefile = workflow_path / snakefile\n    else:\n        for snakefile in workflow_path.glob(\"**/Snakefile\"):\n            if snakefile.exists():\n                break\n        else:\n            return min_version\n    with open(snakefile, \"r\") as f:\n        for line in f:\n            match = re.search(r\"min_version\\((.*)\\)\", line)\n            if match:\n                min_version = match.group(1).strip().strip('\"').strip(\"'\")\n                break\n    return min_version\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.check_for_snk_cli_min_version","title":"<code>check_for_snk_cli_min_version(workflow_path)</code>","text":"<p>Check if the workflow has a minimum version of snk_cli.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_path</code> <code>Path</code> <p>The path to the workflow directory.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The minimum version of snk_cli.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.check_for_snk_cli_min_version(Path(\"/path/to/workflow\"))\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def check_for_snk_cli_min_version(self, workflow_path: Path):\n    \"\"\"\n    Check if the workflow has a minimum version of snk_cli.\n\n    Args:\n      workflow_path (Path): The path to the workflow directory.\n\n    Returns:\n      str: The minimum version of snk_cli.\n\n    Examples:\n      &gt;&gt;&gt; nest.check_for_snk_cli_min_version(Path(\"/path/to/workflow\"))\n    \"\"\"\n    snk_config = SnkConfig.from_workflow_dir(workflow_path, create_if_not_exists=True)\n    try:\n        return snk_config.min_snk_cli_version\n    except AttributeError:\n        return None\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.copy_nonstandard_config","title":"<code>copy_nonstandard_config(workflow_dir, config_path)</code>","text":"<p>Copy a nonstandard config file to the workflow directory.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_dir</code> <code>Path</code> <p>The path to the workflow directory.</p> required <code>config_path</code> <code>Path</code> <p>The path to the config file.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.copy_nonstandard_config(\n...     Path(\"/path/to/workflow\"), Path(\"/path/to/config.yaml\")\n... )\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def copy_nonstandard_config(self, workflow_dir: Path, config_path: Path):\n    \"\"\"\n    Copy a nonstandard config file to the workflow directory.\n\n    Args:\n      workflow_dir (Path): The path to the workflow directory.\n      config_path (Path): The path to the config file.\n\n    Examples:\n      &gt;&gt;&gt; nest.copy_nonstandard_config(\n      ...     Path(\"/path/to/workflow\"), Path(\"/path/to/config.yaml\")\n      ... )\n    \"\"\"\n    config_dir = workflow_dir / \"config\"\n    config_dir.mkdir(exist_ok=True)\n    shutil.copyfile(workflow_dir / config_path, config_dir / \"config.yaml\")\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.create_virtual_environment","title":"<code>create_virtual_environment(name)</code>","text":"<p>Create a virtual environment for the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the virtual environment.</p> required <code>snakemake_version</code> <code>str</code> <p>The version of Snakemake to install in the virtual environment. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the virtual environment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.create_virtual_environment(\"example\")\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def create_virtual_environment(self, name: str) -&gt; Path:\n    \"\"\"\n    Create a virtual environment for the workflow.\n\n    Args:\n      name (str): The name of the virtual environment.\n      snakemake_version (str, optional): The version of Snakemake to install in the virtual environment. Defaults to None.\n\n    Returns:\n      Path: The path to the virtual environment.\n\n    Examples:\n      &gt;&gt;&gt; nest.create_virtual_environment(\"example\")\n    \"\"\"\n    venv_dir = self.snk_home / \"venvs\"\n    venv_dir.mkdir(exist_ok=True)\n    venv_path = venv_dir / name\n    try:\n        venv.create(venv_path, with_pip=True, symlinks=True)\n    except FileExistsError:\n        raise FileExistsError(\n            f\"The venv {venv_path} already exists. Please choose a different location or name. Alternatively, use the --force flag to overwrite the existing venv.\"\n        )\n    return venv_path\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.delete_paths","title":"<code>delete_paths(files)</code>","text":"<p>Delete the given paths.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>List[Path]</code> <p>A list of paths to delete.</p> required Side Effects <p>Deletes the given paths.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.delete_paths(\n...     [Path(\"/path/to/workflows/example\"), Path(\"/path/to/bin/example\")]\n... )\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def delete_paths(self, files: List[Path]):\n    \"\"\"\n    Delete the given paths.\n\n    Args:\n      files (List[Path]): A list of paths to delete.\n\n    Side Effects:\n      Deletes the given paths.\n\n    Examples:\n      &gt;&gt;&gt; nest.delete_paths(\n      ...     [Path(\"/path/to/workflows/example\"), Path(\"/path/to/bin/example\")]\n      ... )\n    \"\"\"\n    # check that the files are in self.snk_workflows_dir\n    # i.e. if it is a symlink read the link and check\n    for path in files:\n        if path.is_symlink():\n            print(\"Unlinking:\", path)\n            path.unlink()\n        elif path.is_file():\n            print(\"Deleting:\", path)\n            assert str(self.snk_home) in str(path), \"Cannot delete files outside of SNK_HOME\"\n            path.unlink()\n        elif path.is_dir():\n            print(\"Deleting:\", path)\n            assert str(self.snk_home) in str(path), \"Cannot delete folders outside of SNK_HOME\"\n            shutil.rmtree(path)\n        else:\n            raise TypeError(\"Invalid file type\")\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.download","title":"<code>download(repo_url, name, tag_name=None, commit=None)</code>","text":"<p>Clone a workflow from a git repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_url</code> <code>str</code> <p>The URL of the repo.</p> required <code>name</code> <code>str</code> <p>The name of the workflow.</p> required <code>tag_name</code> <code>str</code> <p>The tag of the workflow. Defaults to None.</p> <code>None</code> <code>commit</code> <code>str</code> <p>The commit SHA of the workflow. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the cloned workflow.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.download(\n...     \"https://github.com/example/repo.git\", \"example\", tag_name=\"v1.0.0\"\n... )\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def download(self, repo_url: str, name: str, tag_name: str = None, commit: str = None) -&gt; Path:\n    \"\"\"\n    Clone a workflow from a git repository.\n\n    Args:\n      repo_url (str): The URL of the repo.\n      name (str): The name of the workflow.\n      tag_name (str, optional): The tag of the workflow. Defaults to None.\n      commit (str, optional): The commit SHA of the workflow. Defaults to None.\n\n    Returns:\n      Path: The path to the cloned workflow.\n\n    Examples:\n      &gt;&gt;&gt; nest.download(\n      ...     \"https://github.com/example/repo.git\", \"example\", tag_name=\"v1.0.0\"\n      ... )\n    \"\"\"\n    location = self.snk_workflows_dir / name\n    options = []\n    if not commit:\n        options.append(\"--depth 1\")\n    if tag_name:\n        options.append(\"--single-branch\")\n        options.append(f\"--branch {tag_name}\")\n    try:\n        repo = Repo.clone_from(repo_url, location, multi_options=options)\n        if commit:\n            repo.git.checkout(commit)\n        else:\n            repo.git.checkout(tag_name)\n    except GitCommandError as e:\n        if \"destination path\" in e.stderr:\n            raise WorkflowExistsError(\n                f\"Workflow '{name}' already exists in {self.snk_workflows_dir}\"\n            )\n        elif f\"Remote branch {tag_name}\" in e.stderr:\n            did_you_mean = \"\"\n            if len(tag_name) &lt; 6:\n                did_you_mean = f\". Did you mean 'v{tag_name}'?\"\n            raise WorkflowNotFoundError(f\"Workflow tag '{tag_name}' not found{did_you_mean}\")\n        elif f\"pathspec '{commit}' did not match\" in e.stderr:\n            if tag_name:\n                raise WorkflowNotFoundError(\n                    f\"Workflow commit '{commit}' not found on branch {tag_name}\"\n                )\n            else:\n                raise WorkflowNotFoundError(f\"Workflow commit '{commit}' not found\")\n        elif \"not found\" in e.stderr:\n            raise WorkflowNotFoundError(f\"Workflow repository '{repo_url}' not found\")\n        raise e\n    return location\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.get_paths_to_delete","title":"<code>get_paths_to_delete(workflow_name)</code>","text":"<p>Get the paths to delete when uninstalling a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the workflow.</p> required <p>Returns:</p> Type Description <code>List[Path]</code> <p>List[Path]: A list of paths to delete.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.get_paths_to_delete(\"example\")\n[Path('/path/to/workflows/example'), Path('/path/to/bin/example')]\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def get_paths_to_delete(self, workflow_name: str) -&gt; List[Path]:\n    \"\"\"\n    Get the paths to delete when uninstalling a workflow.\n\n    Args:\n      workflow_name (str): The name of the workflow.\n\n    Returns:\n      List[Path]: A list of paths to delete.\n\n    Examples:\n      &gt;&gt;&gt; nest.get_paths_to_delete(\"example\")\n      [Path('/path/to/workflows/example'), Path('/path/to/bin/example')]\n    \"\"\"\n    to_delete = []\n\n    # remove repo\n    workflow_dir = self.snk_workflows_dir / workflow_name\n    if workflow_dir.exists() and workflow_dir.is_dir():\n        to_delete.append(workflow_dir)\n    elif workflow_dir.is_symlink():\n        # editable\n        to_delete.append(workflow_dir)\n\n    workflow_executable = self.snk_executable_dir / workflow_name\n    if workflow_executable.exists():\n        to_delete.append(workflow_executable)\n\n    # remove venv\n    venv_path = self.snk_venv_dir / workflow_name\n    if venv_path.exists():\n        to_delete.append(venv_path)\n\n    # remove link\n    workflow_symlink_executable = self.bin_dir / workflow_name\n    if workflow_symlink_executable.is_symlink():\n        if str(os.readlink(workflow_symlink_executable)) == str(workflow_executable):\n            to_delete.append(workflow_symlink_executable)\n\n    return to_delete\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.install","title":"<code>install(workflow, editable=False, name=None, tag=None, commit=None, config=None, snakefile=None, force=False, additional_resources=[], conda=None, snakemake_version=None, dependencies=[], isolate=False)</code>","text":"<p>Installs a Snakemake workflow as a CLI.</p> <p>Parameters:</p> Name Type Description Default <code>workflow</code> <code>str</code> <p>The URL of the repo or the path to the local workflow.</p> required <code>editable</code> <code>bool</code> <p>Whether to install the workflow in editable mode. Defaults to False.</p> <code>False</code> <code>name</code> <code>str</code> <p>The name of the workflow. Defaults to None.</p> <code>None</code> <code>tag</code> <code>str</code> <p>The tag of the workflow. Defaults to None.</p> <code>None</code> <code>commit</code> <code>str</code> <p>The commit SHA of the workflow. Defaults to None.</p> <code>None</code> <code>config</code> <code>Path</code> <p>The path to the snakemake config file. Defaults to None.</p> <code>None</code> <code>snakefile</code> <code>Path</code> <p>The path to the Snakefile. Defaults to None.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Whether to force the installation. Defaults to False.</p> <code>False</code> <code>additional_resources</code> <code>list</code> <p>A list of resources additional to the resources folder to copy. Defaults to [].</p> <code>[]</code> <code>conda</code> <code>bool</code> <p>Modify the snk config file to control conda use. If None, will not modify the config file. Defaults to None.</p> <code>None</code> <code>snakemake_version</code> <code>str</code> <p>The version of Snakemake to install in the virtual environment. Defaults to None.</p> <code>None</code> <code>dependencies</code> <code>list</code> <p>A list of dependencies to install. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Workflow</code> <code>Workflow</code> <p>The installed workflow.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.install(\n...     \"https://github.com/example/repo.git\", name=\"example\", tag=\"v1.0.0\"\n... )\n&gt;&gt;&gt; nest.install(\n...     \"https://github.com/example/repo.git\", name=\"example\", commit=\"0123456\"\n... )\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def install(\n    self,\n    workflow: str,\n    editable=False,\n    name=None,\n    tag=None,\n    commit=None,\n    config: Path = None,\n    snakefile: Path = None,\n    force=False,\n    additional_resources=[],\n    conda: bool = None,\n    snakemake_version=None,\n    dependencies=[],\n    isolate=False,\n) -&gt; Workflow:\n    \"\"\"\n    Installs a Snakemake workflow as a CLI.\n\n    Args:\n      workflow (str): The URL of the repo or the path to the local workflow.\n      editable (bool, optional): Whether to install the workflow in editable mode. Defaults to False.\n      name (str, optional): The name of the workflow. Defaults to None.\n      tag (str, optional): The tag of the workflow. Defaults to None.\n      commit (str, optional): The commit SHA of the workflow. Defaults to None.\n      config (Path, optional): The path to the snakemake config file. Defaults to None.\n      snakefile (Path, optional): The path to the Snakefile. Defaults to None.\n      force (bool, optional): Whether to force the installation. Defaults to False.\n      additional_resources (list, optional): A list of resources additional to the resources folder to copy. Defaults to [].\n      conda (bool, optional): Modify the snk config file to control conda use. If None, will not modify the config file. Defaults to None.\n      snakemake_version (str, optional): The version of Snakemake to install in the virtual environment. Defaults to None.\n      dependencies (list, optional): A list of dependencies to install. Defaults to [].\n    Returns:\n      Workflow: The installed workflow.\n\n    Examples:\n      &gt;&gt;&gt; nest.install(\n      ...     \"https://github.com/example/repo.git\", name=\"example\", tag=\"v1.0.0\"\n      ... )\n      &gt;&gt;&gt; nest.install(\n      ...     \"https://github.com/example/repo.git\", name=\"example\", commit=\"0123456\"\n      ... )\n    \"\"\"\n\n    def handle_force_installation(name: str):\n        try:\n            self.uninstall(name=name, force=True)\n        except WorkflowNotFoundError:\n            pass\n\n    workflow = str(workflow)  # ensure it is a string\n    try:\n        workflow = self._format_repo_url(workflow)\n        if not name:\n            name = self._get_name_from_git_url(workflow)\n        if not force:\n            self._check_workflow_name_available(name)\n        else:\n            handle_force_installation(name)\n        workflow_path = self.download(workflow, name, tag_name=tag, commit=commit)\n    except WorkflowNotFoundError as e:\n        to_remove = self.get_paths_to_delete(name)\n        self.delete_paths(to_remove)\n        raise e\n    except InvalidWorkflowRepositoryError:\n        workflow_local_path = Path(workflow).resolve()\n        if workflow_local_path.is_file():\n            raise InvalidWorkflowError(\n                f\"When installing a local workflow, the path must be a directory. Found: {workflow_local_path}\"\n            )\n        if (\n            self.snk_workflows_dir.resolve().is_relative_to(workflow_local_path)\n            and not editable\n        ):\n            raise InvalidWorkflowError(\n                f\"The workflow directory contains SNK_HOME!\\nWORKFLOW: {workflow_local_path}\\nSNK_HOME: {self.snk_workflows_dir.resolve()}.\\n\\nTry installing the workflow with --editable.\"\n            )\n        if not name:\n            name = workflow_local_path.name\n        if not force:\n            self._check_workflow_name_available(name)\n        else:\n            handle_force_installation(name)\n        workflow_path = self.local(workflow_local_path, name, editable)\n    try:\n        self.validate_Snakemake_repo(workflow_path)\n        # update non standard files\n        if config:\n            config_path = workflow_path / config\n            if not config_path.exists():\n                raise FileNotFoundError(f\"Config file not found at {config_path}\")\n            self.modify_snk_config(workflow_path, configfile=config_path)\n        if snakefile:\n            snakefile_path = workflow_path / snakefile\n            if not snakefile_path.exists():\n                raise FileNotFoundError(f\"Snakefile not found at {snakefile_path}\")\n            self.modify_snk_config(workflow_path, snakefile=snakefile_path)\n        # set the version of the workflow\n        if editable:\n            version = \"editable\"\n        elif tag:\n            version = tag\n        elif commit:\n            version = commit\n        else:\n            try:\n                repo = Repo(workflow_path)\n                sha = repo.head.object.hexsha\n                version = repo.git.rev_parse(sha, short=8)\n            except Exception:\n                version = None\n        self.modify_snk_config(workflow_path, version=version)\n        # check if we need to install snakemake in a virtual environment\n        snakemake_version_to_install_in_venv = None\n        snakemake_min_version = self.check_for_snakemake_min_version(workflow_path, snakefile)\n        if snakemake_version is not None:\n            snakemake_version_to_install_in_venv = snakemake_version\n            if parse_version(self._current_snakemake_version) &lt; parse_version(\n                snakemake_min_version\n            ):\n                # The current version of Snakemake is less than the minimum version required by the workflow\n                snakemake_version_to_install_in_venv = f\"&gt;={snakemake_min_version}\"\n        min_snk_cli_version = self.check_for_snk_cli_min_version(workflow_path)\n        snk_cli_in_deps = len([dep for dep in dependencies if \"snk_cli\" in dep]) &gt; 0\n        if min_snk_cli_version is not None and not snk_cli_in_deps:\n            if parse_version(self._current_snk_cli_version) &lt; parse_version(\n                min_snk_cli_version\n            ):\n                # The current version of Snakemake is less than the minimum version required by the workflow\n                dependencies.append(f\"snk_cli&gt;={min_snk_cli_version}\")\n        if snakemake_version_to_install_in_venv is not None or dependencies:\n            isolate = True\n        if isolate:\n            venv_path = self.create_virtual_environment(name)\n            self._install_snk_cli_in_venv(\n                venv_path,\n                snakemake_version=snakemake_version_to_install_in_venv,\n                dependencies=dependencies,\n            )\n            python_interpreter_path = venv_path / \"bin\" / \"python\"\n        else:\n            python_interpreter_path = self.python_interpreter_path\n        # create the workflow executable\n        workflow_executable_path = self.create_executable(\n            workflow_path, name, python_interpreter_path=python_interpreter_path\n        )\n        self.link_workflow_executable_to_bin(workflow_executable_path)\n        if additional_resources:\n            self.additional_resources(workflow_path, additional_resources)\n        if conda is not None:\n            self.modify_snk_config(workflow_path, conda=conda)\n        self._confirm_installation(name)\n    except Exception as e:\n        # remove any half completed steps\n        to_remove = self.get_paths_to_delete(name)\n        self.delete_paths(to_remove)\n        raise e\n    return Workflow(workflow_path)\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.link_workflow_executable_to_bin","title":"<code>link_workflow_executable_to_bin(workflow_executable_path)</code>","text":"<p>Links a workflow executable to the bin directory.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_executable_path</code> <code>Path</code> <p>The path to the workflow executable.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <p>The path to the linked workflow executable.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.link_workflow_executable_to_bin(Path(\"/path/to/workflow_executable\"))\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def link_workflow_executable_to_bin(self, workflow_executable_path: Path):\n    \"\"\"\n    Links a workflow executable to the bin directory.\n\n    Args:\n      workflow_executable_path (Path): The path to the workflow executable.\n\n    Returns:\n      Path: The path to the linked workflow executable.\n\n    Examples:\n      &gt;&gt;&gt; nest.link_workflow_executable_to_bin(Path(\"/path/to/workflow_executable\"))\n    \"\"\"\n    name = workflow_executable_path.name\n    if (self.bin_dir / name).is_symlink() and os.readlink(self.bin_dir / name) == str(\n        workflow_executable_path\n    ):\n        # skip if it's already there\n        return self.bin_dir / name\n    try:\n        os.symlink(workflow_executable_path.absolute(), self.bin_dir / name)\n    except FileExistsError:\n        raise WorkflowExistsError(f\"File '{name}' already exists in SNK_BIN ({self.bin_dir})\")\n    return self.bin_dir / name\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.local","title":"<code>local(path, name, editable=False)</code>","text":"<p>Install a local workflow.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the local workflow.</p> required <code>name</code> <code>str</code> <p>The name of the workflow.</p> required <code>editable</code> <code>bool</code> <p>Whether to install the workflow in editable mode. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the installed workflow.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.local(Path(\"/path/to/workflow\"), \"example\")\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def local(self, path: Path, name: str, editable=False) -&gt; Path:\n    \"\"\"\n    Install a local workflow.\n\n    Args:\n      path (Path): The path to the local workflow.\n      name (str): The name of the workflow.\n      editable (bool, optional): Whether to install the workflow in editable mode. Defaults to False.\n\n    Returns:\n      Path: The path to the installed workflow.\n\n    Examples:\n      &gt;&gt;&gt; nest.local(Path(\"/path/to/workflow\"), \"example\")\n    \"\"\"\n    location = self.snk_workflows_dir / name\n    if editable:\n        os.symlink(path.absolute(), location, target_is_directory=True)\n        return location\n    shutil.copytree(path, location)\n    try:\n        Repo(location)\n    except InvalidGitRepositoryError:\n        Repo.init(location, mkdir=False)\n    return location\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.modify_snk_config","title":"<code>modify_snk_config(workflow_path, **kwargs)</code>","text":"<p>Modify the snk config file.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_path</code> <code>Path</code> <p>The path to the workflow directory.</p> required <code>**kwargs</code> <p>Additional keyword arguments to modify the snk config file.</p> <code>{}</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.modify_snk_config(Path(\"/path/to/workflow\"), logo=example)\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def modify_snk_config(self, workflow_path: Path, **kwargs):\n    \"\"\"\n    Modify the snk config file.\n\n    Args:\n      workflow_path (Path): The path to the workflow directory.\n      **kwargs: Additional keyword arguments to modify the snk config file.\n\n    Examples:\n      &gt;&gt;&gt; nest.modify_snk_config(Path(\"/path/to/workflow\"), logo=example)\n    \"\"\"\n    snk_config = SnkConfig.from_workflow_dir(workflow_path, create_if_not_exists=True)\n    modified = False\n    for key, value in kwargs.items():\n        if getattr(snk_config, key) != value:\n            modified = True\n            setattr(snk_config, key, value)\n    if modified:\n        snk_config.save()\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.uninstall","title":"<code>uninstall(name, force=False)</code>","text":"<p>Uninstalls a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the workflow.</p> required <code>force</code> <code>bool</code> <p>Whether to force the uninstallation. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether the uninstallation was successful.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.uninstall(\"example\")\nTrue\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def uninstall(self, name: str, force: bool = False) -&gt; bool:\n    \"\"\"\n    Uninstalls a workflow.\n\n    Args:\n      name (str): The name of the workflow.\n      force (bool, optional): Whether to force the uninstallation. Defaults to False.\n\n    Returns:\n      bool: Whether the uninstallation was successful.\n\n    Examples:\n      &gt;&gt;&gt; nest.uninstall(\"example\")\n      True\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(f\"Name must be a string. Found: {name}\")\n    to_remove = self.get_paths_to_delete(name)\n    if not to_remove:\n        raise WorkflowNotFoundError(f\"Workflow '{name}' not found\")\n    if force:\n        proceed = True\n    else:\n        print(f\"Uninstalling {name}\")\n        print(\"  Would remove:\")\n        for p in to_remove:\n            print(f\"    {p}{'/*' if p.is_dir() else ''}\")\n        ans = input(\"Proceed (Y/n)? \")\n        proceed = ans.lower() in [\"y\", \"yes\", \"\"]\n    if not proceed:\n        return False\n    self.delete_paths(to_remove)\n    return True\n</code></pre>"},{"location":"reference/nest/#snk.nest.Nest.validate_Snakemake_repo","title":"<code>validate_Snakemake_repo(repo)</code>","text":"<p>Validates a Snakemake repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo</code> <code>Repo</code> <p>The Snakemake repository.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the repository is valid, False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nest.validate_Snakemake_repo(Repo(\"/path/to/repo\"))\n</code></pre> Source code in <code>snk/nest.py</code> <pre><code>def validate_Snakemake_repo(self, repo: Repo):\n    \"\"\"\n    Validates a Snakemake repository.\n\n    Args:\n      repo (Repo): The Snakemake repository.\n\n    Returns:\n      bool: True if the repository is valid, False otherwise.\n\n    Examples:\n      &gt;&gt;&gt; nest.validate_Snakemake_repo(Repo(\"/path/to/repo\"))\n    \"\"\"\n    pass\n</code></pre>"},{"location":"snk-cli/","title":"Snk-cli","text":"<p>Snk-cli is used internally by snk to dynamically generate the snakemake CLIs. The generated CLI is modern and feature rich and provides subcommands for interacting with the workflow. Many aspects of the generated CLI can be configured though the Snk config file.</p> <p>The CLI provides several commands for interacting with the workflow including:</p> <ul> <li>config - Show the workflow configuration.</li> <li>env - Access the workflow conda environments.</li> <li>script - Access the workflow scripts.</li> <li>info - Show information about the workflow.</li> <li>profile - Access the workflow profiles.</li> <li>run - Run the Snakemake workflow.</li> </ul> <p>You can also use <code>snk-cli</code> without <code>snk</code> to build self contained snakemake tools. See here for more details -&gt; https://snk.wytamma.com/workflow_packages</p>"},{"location":"snk-cli/config/","title":"Show the Workflow Configuration","text":"<p>The config subcommand will display the workflow configuration file contents. You can use the <code>--pretty</code> (<code>-p</code>) flag to display the configuration in a more readable format.</p> <pre><code>snk-basic-pipeline config\n</code></pre> <pre><code>genome: data/genome.fa\nsamples_dir: data/samples\nsample:\n- A\n- B\n- C\n</code></pre> <p>You can pipe the output to a file to save the configuration.</p> <pre><code>snk-basic-pipeline config &gt; config.yaml\n</code></pre> <p>You can then edit the configuration file and use it to run the workflow.</p> <pre><code>snk-basic-pipeline run --config config.yaml\n</code></pre>"},{"location":"snk-cli/env/","title":"Access the workflow conda environments","text":"<p>The <code>env</code> subcommand in the <code>workflow</code> tool allows you to access and manage the conda environments used within the workflow. This guide provides an overview of the available options and commands for working with workflow environments.</p>"},{"location":"snk-cli/env/#options","title":"Options","text":"<ul> <li><code>--help</code>, <code>-h</code>: Show the help message and exit.</li> </ul>"},{"location":"snk-cli/env/#commands","title":"Commands","text":"<p>The <code>env</code> subcommand provides several commands to manage the workflows conda environments.</p>"},{"location":"snk-cli/env/#list","title":"<code>list</code>","text":"<p>List the environments in the workflow.</p> <pre><code>snk-basic-pipeline env list [OPTIONS]\n</code></pre>"},{"location":"snk-cli/env/#activate","title":"<code>activate</code>","text":"<p>Activate a workflow conda environment.</p> <pre><code>snk-basic-pipeline env activate [OPTIONS] ENV_NAME\n</code></pre> <ul> <li><code>ENV_NAME</code>: Name of the environment to activate.</li> </ul> <p>This command activates the specified conda environment within the workflow.</p>"},{"location":"snk-cli/env/#create","title":"<code>create</code>","text":"<p>This command creates all the conda environments specified in the <code>envs</code> dir. Individual conda envs can be create with <code>workflow env create ENV_NAME</code>.</p> <p>Snakemake workflows that use a lot of conda environments can take a long time to install as each env is created sequentially. Running <code>workflow env create --workers number_of_workers</code> will create all the conda envs in parallel up to the <code>number of workers</code> requested (defaults to 1).</p> <pre><code>snk-basic-pipeline env create --workers 4  # create up to 4 conda envs at a time\n</code></pre> <p>Warning</p> <p>Some conda envs may not support parallel creation. If you encounter an error, try reducing the number of workers.</p>"},{"location":"snk-cli/env/#remove","title":"<code>remove</code>","text":"<p>Delete conda environments.</p> <pre><code>snk-basic-pipeline env remove [OPTIONS] [ENV_NAME...]\n</code></pre> <p>This command deletes all the conda environments in the workflow. You can also delete individual environments by specifying the environment name. Use the <code>--force</code> option to skip the confirmation prompt.</p>"},{"location":"snk-cli/env/#run","title":"<code>run</code>","text":"<p>The <code>env run</code> command in the <code>workflow</code> tool allows you to run a command within one of the workflow environments.</p>"},{"location":"snk-cli/env/#arguments","title":"Arguments","text":"<ul> <li><code>cmd</code>: The command to run in the environment. This argument is required.</li> </ul>"},{"location":"snk-cli/env/#options_1","title":"Options","text":"<ul> <li><code>--env</code>, <code>-e</code>: The name of the environment in which to run the command.</li> <li><code>--help</code>, <code>-h</code>: Show the help message and exit.</li> </ul>"},{"location":"snk-cli/env/#usage","title":"Usage","text":"<p>To run a command in one of the workflow environments, use the following command format:</p> <pre><code>snk-basic-pipeline env run --env ENV_NAME CMD...\n</code></pre> <ul> <li><code>CMD...</code>: The command and its arguments to execute within the specified environment.</li> </ul> <p>Make sure to replace <code>ENV_NAME</code> with the actual name of the desired environment, and <code>CMD...</code> with the command you want to run.</p>"},{"location":"snk-cli/env/#example","title":"Example","text":"<p>Here's an example command that demonstrates the usage of <code>workflow env run</code>:</p> <pre><code>snk-basic-pipeline env run -e my_environment \"python script.py --input input_file.txt --output output_file.txt\"\n</code></pre> <p>This command runs the <code>python script.py --input input_file.txt --output output_file.txt</code> command within the <code>my_environment</code> environment in the workflow. Adjust the command and environment name according to your specific use case.</p> <ul> <li><code>ENV_NAME</code>: Name of the environment in which to run the command.</li> <li><code>COMMAND [ARGS]...</code>: The command and its arguments to execute within the specified environment.</li> </ul> <p>This command runs the provided command within the specified conda environment in the workflow.</p>"},{"location":"snk-cli/env/#show","title":"<code>show</code>","text":"<p>Show the environments config file contents.</p> <pre><code>snk-basic-pipeline env show [OPTIONS]\n</code></pre> <p>This command displays the contents of the environments configuration file used in the workflow.</p>"},{"location":"snk-cli/info/","title":"Show information about the workflow","text":"<p>The <code>info</code> subcommand provides JSON formatted information about the workflow.</p> <pre><code>snk-basic-pipeline info\n</code></pre> <pre><code>{\n  \"name\": \"snk-basic-pipeline\",\n  \"version\": \"4a530896\",\n  \"workflow_dir_path\": \".../snk/workflows/snk-basic-pipeline\"\n}\n</code></pre>"},{"location":"snk-cli/profile/","title":"Access the workflow profiles","text":"<p>The <code>profile</code> subcommand provides several commands to manage the workflow profiles. Profiles are used to define different configurations for the workflow e.g. you can configure how the workflow will run on a HPC. You can read more about profiles in the Snakemake documentation.</p> <p>Note</p> <p>For snk to be able to access the profiles, the profiles must be located in the <code>profiles</code> directory of the workflow.</p>"},{"location":"snk-cli/profile/#list","title":"List","text":"<p>List the profiles in the workflow.</p> <pre><code>snk-basic-pipeline profile list\n</code></pre>"},{"location":"snk-cli/profile/#show","title":"Show","text":"<p>The show command will display the contents of a profile.</p> <pre><code>snk-basic-pipeline profile show slurm\n</code></pre> <p>You can save the profiles by piping the output to a file.</p> <pre><code>snk-basic-pipeline profile show slurm &gt; profile/config.yaml\n</code></pre> <p>Note</p> <p>You must save the profile as config.yaml in a directory so that it can be accessed by the workflow.</p>"},{"location":"snk-cli/profile/#load-a-profile","title":"Load a profile","text":"<p>You can load a profile by using the <code>--profile</code> option in the run command.</p> <pre><code>snk-basic-pipeline run --profile profile/config.yaml\n</code></pre>"},{"location":"snk-cli/profile/#edit","title":"Edit","text":"<p>The edit command will open the profile in the default editor. Changes saved will modify the default profile settings for the installation.</p> <pre><code>snk-basic-pipeline profile edit slurm\n</code></pre>"},{"location":"snk-cli/run/","title":"Run the snakemake workflow","text":"<p>The <code>run</code> subcommand will run the workflow. </p> <p>Note</p> <p>The snk-basic-pipeline workflow used as an example in this documentation can be found here</p>"},{"location":"snk-cli/run/#setup","title":"Setup","text":"<p>Download the test data</p> <pre><code>snk-basic-pipeline script run download_data\n</code></pre>"},{"location":"snk-cli/run/#running-the-workflow","title":"Running the workflow","text":"<p>To run the workflow, use the <code>run</code> command. This will execute the workflow using Snakemake.</p> <pre><code>snk-basic-pipeline run # Run the workflow\n</code></pre> <pre><code>Building DAG of jobs...\nUsing shell: /bin/bash\nProvided cores: 8\nRules claiming more threads will be scaled down.\nJob stats:\njob                count\n---------------  -------\nall                    1\ncall_variants          1\nmap_reads              3\nplot_quals             1\nsort_alignments        3\ntotal                  9\n</code></pre>"},{"location":"snk-cli/run/#options","title":"Options","text":"<p>The <code>run</code> command will pass all unrecognized arguments to Snakemake. That means that if you want to use any of the Snakemake options, you can pass them to the <code>run</code> command e.g. <code>snk-basic-pipeline run --use-singularity</code>. To see all the options available in Snakemake, you can use the <code>--help-snakemake</code> (<code>-hs</code>) flag. You can prepend <code>--snake</code> to any Snakemake option e.g. <code>snk-basic-pipeline run --snake--use-singularity</code> to ensure the <code>--use-singularity</code> option is passed to Snakemake.</p> <p>Note</p> <p>You can permanently set additional Snakemake options by adding them to the <code>additional_snakemake_args</code> section of the <code>snk.yaml</code> file.</p> <p>The snk-cli provides several options to configure the workflow.</p>"},{"location":"snk-cli/run/#configuration","title":"Configuration","text":"<p>You can use the <code>--config</code> flag to specify a configuration file to override the existing workflow configuration. This is the same as using the <code>--configfile</code> flag in Snakemake. </p> <pre><code>snk-basic-pipeline run --config config.yaml\n</code></pre>"},{"location":"snk-cli/run/#resources","title":"Resources","text":"<p>You can use the <code>--resource</code> flag to specify additional resources to copy from the workflow directory at run time. The resources must be specified as a path relative to the workflow directory. The resources will be copied to the working directory before the workflow is executed and removed after the workflow completes (unless the <code>--keep-resources</code> flag is used).</p> <pre><code>snk-basic-pipeline run --resource data/extra\n</code></pre>"},{"location":"snk-cli/run/#profile","title":"Profile","text":"<p>You can use the <code>--profile</code> flag to specify a profile to use for configuring Snakemake. You can specify the profile by name. The profile must be located in the <code>profiles</code> directory of the workflow.</p> <pre><code>snk-basic-pipeline run --profile slurm\n</code></pre>"},{"location":"snk-cli/run/#generate-a-workflow-graph","title":"Generate a workflow graph","text":"<p>You can use the <code>--dag</code> flag to save the directed acyclic graph to a file. The output file must end in <code>.pdf</code>, <code>.png</code>, or <code>.svg</code>.</p> <pre><code>snk-basic-pipeline run --dag workflow.pdf\n</code></pre> <p>Note</p> <p>The <code>--dag</code> flag requires the <code>graphviz</code> package (<code>dot</code>) to be installed.</p>"},{"location":"snk-cli/run/#other-options","title":"Other Options","text":"<p>You can use the <code>--dry</code> flag to display what would be done without executing anything (this is the same as using the <code>--dry-run</code> flag in Snakemake).</p> <p>The <code>--lock</code> flag is used to lock the working directory (by default, the working directory is not locked e.g. <code>--nolock</code> is passed to Snakemake).</p> <p>The <code>--cores</code> flag is used to set the number of cores to use. If <code>None</code> is specified, all cores will be used by default.</p> <p>The <code>--no-conda</code> flag is used to disable the use of conda environments.</p> <p>The <code>--keep-snakemake</code> flag is used to keep the <code>.snakemake</code> folder after the pipeline completes. This is useful for debugging purposes. By default, the <code>.snakemake</code> folder is removed after the pipeline completes.</p>"},{"location":"snk-cli/run/#help","title":"Help","text":"<p>The <code>snk-cli</code> help message is broken into two sections. The first section lists the options available for the <code>run</code> command. The second section lists the workflow configuration options (generated from the snakemake configfile).</p> <pre><code>snk-basic-pipeline run --help\n</code></pre> <pre><code> Usage: snk-basic-pipeline run [OPTIONS]                                 \n\n Run the workflow.                                                       \n All unrecognized arguments are passed onto Snakemake.                   \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --config                   FILE     Path to snakemake config file.    \u2502\n\u2502                                     Overrides existing workflow       \u2502\n\u2502                                     configuration.                    \u2502\n\u2502                                     [default: None]                   \u2502\n\u2502 --resource        -r       PATH     Additional resources to copy from \u2502\n\u2502                                     workflow directory at run time.   \u2502\n\u2502 --profile         -p       TEXT     Name of profile to use for        \u2502\n\u2502                                     configuring Snakemake.            \u2502\n\u2502                                     [default: None]                   \u2502\n\u2502 --dry             -n                Do not execute anything, and      \u2502\n\u2502                                     display what would be done.       \u2502\n\u2502 --lock            -l                Lock the working directory.       \u2502\n\u2502 --dag             -d       PATH     Save directed acyclic graph to    \u2502\n\u2502                                     file. Must end in .pdf, .png or   \u2502\n\u2502                                     .svg                              \u2502\n\u2502                                     [default: None]                   \u2502\n\u2502 --cores           -c       INTEGER  Set the number of cores to use.   \u2502\n\u2502                                     If None will use all cores.       \u2502\n\u2502                                     [default: None]                   \u2502\n\u2502 --no-conda                          Do not use conda environments.    \u2502\n\u2502 --keep-resources                    Keep resources after pipeline     \u2502\n\u2502                                     completes.                        \u2502\n\u2502 --keep-snakemake                    Keep .snakemake folder after      \u2502\n\u2502                                     pipeline completes.               \u2502\n\u2502 --verbose         -v                Run workflow in verbose mode.     \u2502\n\u2502 --help-snakemake  -hs               Print the snakemake help and      \u2502\n\u2502                                     exit.                             \u2502\n\u2502 --help            -h                Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Workflow Configuration \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --sample       -s      TEXT  Samples to map to the reference genome.  \u2502\n\u2502                              [default: A, B, C]                       \u2502\n\u2502 --genome       -g      PATH  Path to the reference genome.            \u2502\n\u2502                              [default: data/genome.fa]                \u2502\n\u2502 --samples-dir          PATH  Directory of samples.                    \u2502\n\u2502                              [default: data/samples]                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"snk-cli/script/","title":"Access the workflow scripts","text":"<p>The <code>script</code> commands allow you to interact with the workflow scripts. Scripts must be located in the <code>scripts</code> directory of the workflow.</p>"},{"location":"snk-cli/script/#list","title":"List","text":"<p>The list command will list all scripts in the workflow.</p> <pre><code>snk-basic-pipeline script list\n</code></pre>"},{"location":"snk-cli/script/#show","title":"Show","text":"<p>The show command will display the contents of a script.</p> <pre><code>snk-basic-pipeline script show hello.py\n</code></pre>"},{"location":"snk-cli/script/#run","title":"Run","text":"<p>The run command will run a script.</p> <pre><code>snk-basic-pipeline script run hello.py\n</code></pre> <p>Note</p> <p>The executor used to run the script is determined by the suffix of the script file. For example, a script named <code>hello.py</code> will be run using the <code>python</code> executor.</p> <p>Use the <code>--env</code> option to specify the environment to run the script in.</p> <pre><code>snk-basic-pipeline script run --env python hello.py\n</code></pre>"}]}